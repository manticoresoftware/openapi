openapi: 3.1.0
info:
  title: Manticore Search Client
  description: |
    Ð¡lient for Manticore Search.
  version: 4.0.0
  contact:
    name: Manticore Software Ltd.
    email: info@manticoresearch.com
    url: 'https://manticoresearch.com/contact-us/'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
tags:
  - name: Index
    description: Operations regarding adding, updating or deleting documents
  - name: Search
    description: Operations about performing searches over indexes
  - name: Utils
    description: Various operations
externalDocs:
  description: Find out more about Manticore Search
  url: 'https://manticoresearch.com/'
components:
  examples:
    objectExample:
      value: www
      summary: A sample object
  schemas:
    aggregation:
      type: object
      description: Used for grouping search results
      properties:
        terms:
          type: object
          properties:
            field:
              type: string
              description: Name of attribute to aggregate by
              example: field1
            size:
              type: integer
              description: Maximum number of buckets in the result
              example: 1000
          additionalProperties: false
        sort:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
              properties:
                order:
                  type: string
              additionalProperties: false
        composite:
          type: object
          description: Used for grouping search results by multiple fields
          properties:
            size:
              type: integer
              description: Maximum number of composite buckets in the result
              example: 1000
            sources:
              type: array
              items:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    terms:
                     type: object
                     properties:
                       field:
                         type: string
                         description: Name of attribute to aggregate by
                         example: field1
                     additionalProperties: false
                  additionalProperties: false
          additionalProperties: false
    attrFilter:
      oneOf:
        - $ref: '#/components/schemas/equalsFilter'
        - $ref: '#/components/schemas/inFilter'
        - $ref: '#/components/schemas/rangeFilter'
        - $ref: '#/components/schemas/geoFilter'
    basicSearchRequest:
      description: Request object for search operation
      allOf:
        - type: object
          required: [query]
          properties:
            query:
              $ref: '#/components/schemas/queryFilter'
        - $ref: '#/components/schemas/searchRequestParameters'
      example:
        $ref: '#/components/examples/objectExample'
    boolFilter:
      type: object
      properties:
        bool:
          type: object
          properties:
            must:
              type: array
              items:
                $ref: '#/components/schemas/queryFilter'
            must_not:
              type: array
              items:
                $ref: '#/components/schemas/queryFilter'
            should:
              type: array
              items:
                $ref: '#/components/schemas/queryFilter'
          additionalProperties: false
    bulkResponse:
      type: object
      description: Success bulk response
      properties:
        items:
          type: object
        errors:
          type: boolean
        error:
          type: string
      additionalProperties: true
    deleteDocumentRequest:
      type: object
      description: >
        Payload for delete request.
        
        Documents can be deleted either one by one by specifying the document id
        or by providing a query object.
        
        For more information see 
        [Delete API](https://manual.manticoresearch.com/Deleting_documents)
      required:
        - index
      properties:
        index:
          type: string
          description: Index name
        cluster:
          type: string
          description: cluster name
        id:
          type: integer
          format: int64
          description: Document ID
        query:
          type: object
          description: Query tree object
      example:
        index: test
        id: 1
    deleteResponse:
      type: object
      description: Success response
      properties:
        _index:
          type: string
        deleted:
          type: integer
        _id:
          type: integer
          format: int64
        found:
          type: boolean
        result:
          type: string
      example:
        _index: test
        deleted: 29      
    equalsFilter:
      type: object
      properties:
        equals:
          type: ['number', 'string']
      additionalProperties: false
    fulltextFilter:
      oneOf:
        - $ref: '#/components/schemas/matchFilter'
        - $ref: '#/components/schemas/matchAllFilter'
        - $ref: '#/components/schemas/matchPhraseFilter'
        - $ref: '#/components/schemas/queryStringFilter'
    highlight:
      allOf:
        - type: object
          description: Defines a query HIGHLIGHT expression
          properties:
            after_match:
              type: string
              default: '</strong>'
            allow_empty:
              type: boolean
            around:
              type: integer
            before_match:
              type: string
              default: '<strong>'
            emit_zones:
              type: boolean
            encoder:
              type: string
              enum:
                - default
                - html
            fields:
              oneOf:
                - type: array
                  items:
                    type: string
                  example: ['title','content']
                - type: object
                  additionalProperties:
                    $ref: '#/components/schemas/highlightFieldOption'
            force_all_words:
              type: boolean
            force_snippets:
              type: boolean              
            highlight_query:
              oneOf:
                - type: null
                - $ref: '#/components/schemas/queryFilter'
            html_strip_mode:
              type: string
              enum:
                - 'none'
                - 'strip'
                - 'index'
                - 'retain'
            limits_per_field:
              type: boolean            
            no_match_size:
              type: integer
              enum:
                - 0
                - 1
            order:
              type: string
              enum:
                - asc
                - desc
                - score
            pre_tags:
              type: string
              default: '<strong>'
            post_tags:
              type: string
              default: '</strong>'
            start_snippet_id:
              type: integer
            use_boundaries:
              type: boolean
        - $ref: '#/components/schemas/highlightFieldOption'
    highlightFieldOption:
      type: object
      properties:
         fragment_size:
           type: integer
         limit:
           type: integer
         limit_snippets:
           type: integer
         limit_words:
           type: integer
         number_of_fragments:
           type: integer
      additionalProperties: false
    geoFilter:
      type: object
      properties:
        geo_distance:
          type: object
          properties:
            location_anchor:
              type: object
              properties:
                lat: 
                  type: number
                lon:
                  type: number
              additionalProperties: false
            location_source:
              type: string
            distance_type:
              type: string
              enum:
                - adaptive
                - haversine
            distance:
              type: string
              pattern: ^\.+(km|m|cm|mm|mi|yd|ft|in|NM|nmi|kilometers|meters|centimeters|millimeters|miles|yards|foots|inches|nauticalmiles|)$
          additionalProperties: false
    inFilter:
      type: object
      properties:
        in:
          type: object
          additionalProperties:
            type: array
            items:
              type: ['number', 'string', 'array'] 
    insertDocumentRequest:
      type: object
      description: |
        Object with document data.
      required:
        - index
        - doc
      properties:
        index:
          type: string
          description: Name of the index
        cluster:
          type: string
          description: cluster name
        id:
          type: integer
          format: int64
          description: |
            Document ID.
        doc:
          type: object
          additionalProperties: true
          description: |
            Object with document data
      example:
        index: test
        doc:
          title: This is some title
          gid: 100
    join:
      type: array
      items:
        type: object
        required: ['on', 'table', 'type']
        properties:
          on:
            type: array
            items:
              type: object
              properties:
                left:
                  allOf:
                    - $ref: '#/components/schemas/joinBasicCond'
                    - type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - int
                            - string
                      additionalProperties: false
                operator:
                  type: string
                  enum:
                    - eq
                right:
                  $ref: '#/components/schemas/joinBasicCond'
              additionalProperties: false      
          query:
            $ref: '#/components/schemas/fulltextFilter'
          table:
            type: string
          type:
            type: string
            enum:
              - inner
              - left
        additionalProperties: false
    joinBasicCond:
      type: object
      required: ['field', 'table']
      properties:
        field:
          type: string
        table:
          type: string
      additionalProperties: false  
    knnDocIdRequest:
      allOf:
        - type: object
          required: [doc_id]
          properties:
            doc_id :
              type: integer
              format: int64
        - $ref: '#/components/schemas/knnSearchParameters'
    knnQueryVectorRequest:
      allOf:
        - type: object
          required: [query_vector]
          properties:
            query_vector:
              type: array
              items:
                type: number
        - $ref: '#/components/schemas/knnSearchParameters'
    knnSearchParameters:
      type: object
      required: [field]
      properties:
        field:
          type: string
        k:
          type: integer
        ef:
           type: integer	
      additionalProperties: false
    knnSearchRequest:
      description: Request object for knn search operation
      allOf:
        - type: object
          required: [knn]
          properties:
            knn:
              oneOf:
                - $ref: '#/components/schemas/knnDocIdRequest'
                - $ref: '#/components/schemas/knnQueryVectorRequest'
        - $ref: '#/components/schemas/searchRequestParameters'
    matchFilter:
      type: object
      properties:
        match:
          oneOf:
            - type: string
            - type: object
              additionalProperties:
                type: string
    matchAllFilter:
      type: object
      properties:
        match_all:
          type: string
          enum:
            - {}
    matchPhraseFilter:
      type: object
      properties:
        match_phrase:
          type: object
          additionalProperties:
            type: string
    queryFilter:
      anyOf:
        - $ref: '#/components/schemas/attrFilter'
        - $ref: '#/components/schemas/boolFilter'
        - $ref: '#/components/schemas/fulltextFilter'
    queryStringFilter:
      type: object
      properties:
        query_string:      
          type: string
    rangeFilter:
      type: object
      properties:
        range:
          type: object
          additionalProperties:
            type: object
            properties:
              lt:
                type: ['string', 'number']
              gt:
                type: ['string', 'number']
              lte:
                type: ['string', 'number']
              gte:
                type: ['string', 'number']
            additionalProperties: false
    replaceDocumentRequest:
      type: object
      description: |
        Object with document data.
      required:
        - doc
      properties:
        doc:
          type: object
          additionalProperties: true
          description: |
            Object with document data
      example:
        doc:
          title: This is some title
          gid: 100
    searchRequestParameters:
      type: object
      required: [index]
      properties:
        aggs:
          $ref: '#/components/schemas/aggregation'
          example:
            agg1:
              terms:
                field: field1
                size: 1000
              sort:
                - 'field1':
                    order: asc
        expressions:
          type: object
          additionalProperties:
            type: string
          example:
            title_len: "crc32(title)"
        join:
          $ref: '#/components/schemas/join'
        highlight:
          $ref: '#/components/schemas/highlight'
        index:
          type: string
        limit:
              type: integer
        max_matches:
              type: integer
        offset:
              type: integer
        options:
           type: object
           additionalProperties: true
        profile:
          type: boolean
        sort:
              type: array
              items:
                oneOf:
                  - type: string
                  - type: object
                    additionalProperties:
                      type: string
                      enum:
                        - asc
                        - desc
                  - $ref: '#/components/schemas/sortObject'
              example: []
        _source:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
            - $ref: '#/components/schemas/sourceByRules'
          example: 'attr*'
        track_scores:
          type: boolean
    sortObject:
      type: object
      description: Request object with defined properties used for sorting
      properties:
        order:
          type: string
          enum:
            - asc
            - desc 
        mode:
          type: string
          enum:
            - min
            - max
    sourceByRules:
      type: object
      description: Query fields to be included/excluded to/from response
      properties:
        includes:
          type: array
          default: []
          items:
            type: string
        excludes:
          type: array
          default: ['']
          items:
            type: string
      additionalProperties: false
      minProperties: 1
      example: {"includes": ["attr1","attri*"], "excludes": ["desc*"]}
    successResponse:
      type: object
      description: Success response
      properties:
        _index:
          type: string
        _id:
          type: integer
          format: int64
        created:
          type: boolean
        result:
          type: string
        found:
          type: boolean
        status:
          type: integer
      example:
        _index: test
        _id: 1
        result: created
        created: true
        status: 201      
    percolateRequest:
      type: object
      description: Object with documents to percolate
      required: [query]
      properties:
        query:
          type: object
          additionalProperties: true
          required:
            - percolate
          properties:
            percolate:
              type: object
          example:
            percolate:
              document:
                title: some text to match
    searchResponse:
      type: object
      description: Response object of a search request
      properties:
        took:
          type: integer
        timed_out:
          type: boolean
        aggregations:
          type: object
          additionalProperties: true        
        hits:
          type: object
          properties:
            max_score:
              type: integer
            total:
              type: integer
            total_relation:
              type: string
            hits:
              type: array
              items:
                type: object

          example:
            total: 2
            hits:
              - _id: 1
                _score: 1
                _source:
                  gid: 11
              - _id: 2
                _score: 1
                _source:
                  gid: 20
        profile:
          type: object
        warning:
          type: object
          additionalProperties: true
    errorResponseError:
      oneOf:
        - type: object
          description: Detailed error information from error response
          required:
            - type
          properties:
            type: 
              type: string
            reason:
              type:
                - string
                - 'null'
            index:
              type:
                - string
                - 'null'
        - type: string
          description: Error text from error response
    errorResponse:
      type: object
      description: Error response
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/errorResponseError'
        status:
          type: integer
          default: 500
      example:
        status: 500
        error: an error occured
    sqlResponse:
      type: array
      items:
        type: object
      description: List containing Response object from sql that depends on the query executed as its item.
      example:
        - total: 0
          error: null
    updateDocumentRequest:
      type: object
      description: Payload for update document
      required:
        - index
        - doc
      properties:
        index:
          type: string
        cluster:
          type: string
          description: cluster name
        doc:
          type: object
          description: Index name
          additionalProperties: true
          example:
            gid: 10
        id:
          type: integer
          format: int64
          description: Document ID
        query:
          oneOf:
            - type: null
            - $ref: '#/components/schemas/queryFilter'
          description: Query object to perform updating
          example:
            query:
              match:
                title: match me
    updateResponse:
      type: object
      description: Success response
      properties:
        _index:
          type: string
        updated:
          type: integer
        _id:
          type: integer
          format: int64
        result:
          type: string
      example:
        _index: test
        updated: 29
paths:
  /search:
    post:
      summary: Performs a search on an index
      x-is_search: true
      description: >
       
        The method expects an object with the following mandatory properties:
        
        * the name of the index to search
        
        * the match query object

        For details, see the documentation on [**SearchRequest**](SearchRequest.md)

        The method returns an object with the following properties:
        
        - took: the time taken to execute the search query.
        - timed_out: a boolean indicating whether the query timed out.
        - hits: an object with the following properties:
           - total: the total number of hits found.
           - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:
             - _id: the ID of the matched document.
             - _score: the score of the matched document.
             - _source: the source data of the matched document.
        
        In addition, if profiling is enabled, the response will include an additional array with profiling information attached.

        Here is an example search response:
        
          ```
          {
            'took':10,
            'timed_out':false,
            'hits':
            {
              'total':2,
              'hits':
              [
                {'_id':'1','_score':1,'_source':{'gid':11}},
                {'_id':'2','_score':1,'_source':{'gid':12}}
              ]
            }
          }
          ```

        For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON).

      operationId: search
      tags:
        - Search
      externalDocs:
        url: 'https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/knnSearchRequest'
                - $ref: '#/components/schemas/basicSearchRequest'
            example:
              - '''asas'''
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /bulk:
    post:
      summary: Bulk index operations
      description: >
        Sends multiple operatons like inserts, updates, replaces or deletes. 

        For each operation it's object must have same format as in their dedicated method. 

        The method expects a raw string as the batch in NDJSON.
         Each operation object needs to be serialized to 
         JSON and separated by endline (\n). 
         
          An example of raw input:
          
          ```
          {"insert": {"index": "movies", "doc": {"plot": "A secret team goes to North Pole", "rating": 9.5, "language": [2, 3], "title": "This is an older movie", "lon": 51.99, "meta": {"keywords":["travel","ice"],"genre":["adventure"]}, "year": 1950, "lat": 60.4, "advise": "PG-13"}}}
          \n
          {"delete": {"index": "movies","id":700}}
          ```
          
          Responds with an object telling whenever any errors occured and an array with status for each operation:
          
          ```
          {
            'items':
            [
              {
                'update':{'_index':'products','_id':1,'result':'updated'}
              },
              {
                'update':{'_index':'products','_id':2,'result':'updated'}
              }
            ],
            'errors':false
          }
          ```
      operationId: bulk
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Updating_documents/UPDATE'
      requestBody:
        required: true
        content:
          application/x-ndjson:
            schema:
              type: string 
            #example: 
            #  - '''{"insert": {"index": "test", "id": 1, "doc": {"title": "Title 1"}}},\n{"insert": {"index": "test", "id": 2, "doc": {"title": "Title 2"}}}'''
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /delete:
    post:
      summary: Delete a document in an index
      operationId: delete
      description: >
        Delete one or several documents.

        The method has 2 ways of deleting: either by id,
        in case only one document is deleted or by using a 
        match query, in which case multiple documents can be delete
        .
        
        Example of input to delete by id:
        
          ```
          {'index':'movies','id':100}
          ```
        
        Example of input to delete using a query:
        
          ```
          {
            'index':'movies',
            'query':
            {
              'bool':
              {
                'must':
                [
                  {'query_string':'new movie'}
                ]
              }
            }
          }
          ```
        
        The match query has same syntax as in for searching.
        
        Responds with an object telling how many documents got deleted: 

          ```
          {'_index':'products','updated':1}
          ```
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Updating_documents/UPDATE'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteDocumentRequest'
            example:
              index: test
              query:
                match:
                  title: apple
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /insert:
    post:
      summary: Create a new document in an index
      x-is_indexapi: true
      x-is_insert: true
      operationId: insert
      description: >
        Insert a document. 
        
        Expects an object like:
         
          ```
          {
            'index':'movies',
            'id':701,
            'doc':
            {
              'title':'This is an old movie',
              'plot':'A secret team goes to North Pole',
              'year':1950,
              'rating':9.5,
              'lat':60.4,
              'lon':51.99,
              'advise':'PG-13',
              'meta':'{"keywords":{"travel","ice"},"genre":{"adventure"}}',
              'language':[2,3]
            }
          }
          ```
         
        The document id can also be missing, in which case an autogenerated one will be used:
                 
          ```
          {
            'index':'movies',
            'doc':
            {
              'title':'This is a new movie',
              'plot':'A secret team goes to North Pole',
              'year':2020,
              'rating':9.5,
              'lat':60.4,
              'lon':51.99,
              'advise':'PG-13',
              'meta':'{"keywords":{"travel","ice"},"genre":{"adventure"}}',
              'language':[2,3]
            }
          }
          ```
         
        It responds with an object in format:
          
          ```
          {'_index':'products','_id':701,'created':true,'result':'created','status':201}
          ```
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Adding_documents_to_an_index/Adding_documents_to_a_real-time_index#Adding-documents-to-a-real-time-index'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
            example:
              index: test
              id: 1
              doc:
                title: sample title
                gid: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  '/pq/{index}/search':
    post:
      summary: Perform reverse search on a percolate index
      operationId: percolate
      description: >
        Performs a percolate search. 
        
        This method must be used only on percolate indexes.
        

        Expects two parameters: the index name and an object with
        array of documents to be tested.

        An example of the documents object:

          ```
          {
            "query":
            {
              "percolate":
              {
                "document":
                {
                  "content":"sample content"
                }
              }
            }
          }
          ```

        Responds with an object with matched stored queries: 
        
          ```
          {
            'timed_out':false,
            'hits':
            {
              'total':2,
              'max_score':1,
              'hits':
              [
                {
                  '_index':'idx_pq_1',
                  '_type':'doc',
                  '_id':'2',
                  '_score':'1',
                  '_source':
                  {
                    'query':
                    {
                      'match':{'title':'some'}
                    }
                  }
                },
                {
                  '_index':'idx_pq_1',
                  '_type':'doc',
                  '_id':'5',
                  '_score':'1',
                  '_source':
                  {
                    'query':
                    {
                      'ql':'some | none'
                    }
                  }
                }
              ]
            }
          }
          ```
      tags:
        - Search
      externalDocs:
        url: 'https://manual.manticoresearch.com/Updating_documents/UPDATE'
      parameters:
        - in: path
          name: index
          schema:
            type: string
          required: true
          description: Name of the percolate index
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/percolateRequest'
            example:
              query:
                percolate:
                  document:
                    title: some text to match
      responses:
        '200':
          description: items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /replace:
    post:
      summary: Replace new document in an index
      x-is_indexapi: true
      x-is_replace: true
      operationId: replace
      description: >
        Replace an existing document. Input has same format as `insert` operation. <br/>

        Responds with an object in format: <br/>

          ```
          {'_index':'products','_id':1,'created':false,'result':'updated','status':200}
          ```
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Adding_documents_to_an_index/Adding_documents_to_a_real-time_index#Adding-documents-to-a-real-time-index'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
            example:
              index: test
              id: 1
              doc:
                title: updated title
                gid: 15
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /sql:
    post:
      summary: Perform SQL requests
      x-is_sql: true
      description: >
        Run a query in SQL format.

        Expects a query string passed through `body` parameter and optional `raw_response` parameter that defines a format of response.

        `raw_response` can be set to `False` for Select queries only, e.g., `SELECT * FROM myindex`
        
        The query string must stay as it is, no URL encoding is needed.
        
        The response object depends on the query executed. In select mode the response has same format as `/search` operation.
      operationId: sql
      tags:
        - utils
      externalDocs:
        url: 'https://manual.manticoresearch.com/Connecting_to_the_server/HTTP#sql-api'
      requestBody:
        required: true
        description: >
          A query parameter string.
        content:
          text/plain:
            schema:
              type: string
            example: SHOW TABLES
      parameters:
        - in: query
          name: raw_response  
          required: false
          description: >
           Optional parameter, defines a format of response. Can be set to `False` for Select only queries and set to `True` or omitted for any type of queries:
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: >
            In case of SELECT-only in mode none the response schema is the same
            as of `search`.
            
            In case of `mode=raw` the response depends on the query executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sqlResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /update:
    post:
      summary: Update a document in an index
      x-is_indexapi: true
      x-is_update: true
      x-is_modify: true
      operationId: update
      description: >
        Update one or several documents.

        The update can be made by passing the id or by using a match query in case multiple documents can be updated. 
        For example update a document using document id:
        
          ```
          {'index':'movies','doc':{'rating':9.49},'id':100}
          ```
        
        And update by using a match query:
        
          ```
          {
            'index':'movies',
            'doc':{'rating':9.49},
            'query':
            {
              'bool':
              {
                'must':
                [
                  {'query_string':'new movie'}
                ]
              }
            }
          }
          ``` 
        
        The match query has same syntax as for searching.

        Responds with an object that tells how many documents where updated in format: 
        
          ```
          {'_index':'products','updated':1}
          ```
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Updating_documents/UPDATE'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDocumentRequest'
            example:
              index: test
              doc:
                gid: 20
              query:
                equals:
                  cat_id: 2
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /{index}/_update/{id}:
    post:
      summary: Partially replaces a document in an index
      operationId: partial_replace
      description: >
        Partially replaces a document with given id in an index

        Responds with an object of the following format: 
        
          ```
          {'_index':'products','updated':1}
          ```
      tags:
        - Index
      externalDocs:
        url: 'https://manual.manticoresearch.com/Updating_documents/REPLACE#JSON-REPLACE'
      parameters:
        - in: path
          name: index
          schema:
            type: string
          required: true
          description: Name of the percolate index
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Id of the document to replace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/replaceDocumentRequest'
            example:
              doc:
                price: 20
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
servers:
  - description: Default Manticore Search HTTP 
    url: http://127.0.0.1:9308/
