{{>licenseInfo}}
{{=< >=}}(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient'<#imports>, '<#invokerPackage><&invokerPackage>/</invokerPackage><#modelPackage><&modelPackage>/</modelPackage><&import>'</imports>], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient')<#imports>, require('../<#modelPackage><&modelPackage>/</modelPackage><import>')</imports>);
  } else {
    // Browser globals (root is window)
    if (!root.<&moduleName>) {
      root.<&moduleName> = {};
    }
    root.<&moduleName>.<&classname> = factory(root.<&moduleName>.ApiClient<#imports>, root.<&moduleName>.<import></imports>);
  }
}(this, function(ApiClient<#imports>, <&import></imports>) {
  'use strict';

<#emitJSDoc>  /**
   * <baseName> service.
   * @module <#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>
   * @version <projectVersion>
   */

  /**
   * Constructs a new <&classname>. <#description>
   * <&description></description>
   * @alias module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>
   * @class
   * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient#instance} if unspecified.
   */
</emitJSDoc>  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

<#operations><#operation><#emitJSDoc><^usePromises>
    /**
     * Callback function to receive the result of the <operationId> operation.
     * @callback module:<#invokerPackage><invokerPackage>/</invokerPackage><#apiPackage><apiPackage>/</apiPackage><classname>~<operationId>Callback
     * @param {String} error Error message, if any.
     * @param <#vendorExtensions.x-jsdoc-type>{<&vendorExtensions.x-jsdoc-type>} data The data returned by the service call.</vendorExtensions.x-jsdoc-type><^vendorExtensions.x-jsdoc-type>data This operation does not return a value.</vendorExtensions.x-jsdoc-type>
     * @param {String} response The complete HTTP response.
     */</usePromises>

    /**<#summary>
     * <&summary></summary><#notes>
     * <&notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <&paramName> <&description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<&paramName> <&description><#defaultValue> (default to <&.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<&operationId>Callback} callback The callback function, accepting three arguments: error, data, response<#returnType>
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with an object containing data of type {@link <&vendorExtensions.x-jsdoc-type>} and HTTP response</returnType><^returnType>, with an object containing HTTP response</returnType></usePromises>
     */
</emitJSDoc>    this.<operationId><#usePromises>WithHttpInfo</usePromises> = function(<vendorExtensions.x-codegen-arg-list>) {<#hasOptionalParams>
      opts = opts || {};</hasOptionalParams>
      var postBody = <#bodyParam>JSON.parse(JSON.stringify(<#required><paramName></required><^required>opts['<paramName>']</required>))</bodyParam><^bodyParam>null</bodyParam>;

      <#vendorExtensions.x-is_sql>
      if (postBody) {
        if  ('rawResponse' in opts && !opts.rawResponse)
          postBody = 'query=' + encodeURIComponent( String( postBody ) );
        else if ( !('rawResponse' in opts) || opts.rawResponse)
          postBody = 'mode=raw&query=' + encodeURIComponent( String( postBody ) );
      }
      </vendorExtensions.x-is_sql>

<#allParams>
<#required>
      // verify the required parameter '<paramName>' is set
      if (<paramName> === undefined || <paramName> === null) {
        throw new Error("Missing the required parameter '<paramName>' when calling <operationId>");
      }
</required>
</allParams>
	  <#vendorExtensions.x-is_search>
	  
      if (postBody['source']) {
		postBody['_source'] = postBody['source']; 
		delete postBody['source'];
	  }

	  let restructObj = function(obj, objType) {
		if (!obj['attr'] && !obj['name'] && !obj['query_fields'] && !obj['value'] && !obj['values']
			&& !obj['field'] && !obj['location_anchor'] && !obj['must'] && !obj['must_not'] && !obj['should']
		) {
			return obj;
		}
		
		let keyPropVal;
		let newObj = {};
		if (objType == 'fulltext_filter') {
			if (obj['query_fields']) {
				keyPropVal = obj['query_fields'];
				if (obj['query_phrase']) {
					newObj[keyPropVal] = obj['query_phrase']; 
					newObj = {'match_phrase': newObj};
				} else { 
					newObj[keyPropVal] = obj['operator'] ? {'query': obj['query_string'], 'operator':obj['operator']} : obj['query_string'];
					newObj = {'match': newObj};
				}
			} else {
				newObj = obj;
			}
		} else if (objType == 'attr_filter') {
			if (obj['field']) {
				keyPropVal = obj['field'];
				if (obj['value']) {
					newObj[keyPropVal] = obj['value']; 
					newObj = {'equals': newObj};
				} else if (obj['values']) {
					newObj[keyPropVal] = obj['values']; 
					newObj = {'in': newObj};
				} else  {
					newObj[keyPropVal] = obj;
					delete newObj[keyPropVal]['field'];
					newObj = {'range': newObj};
				} 
			} else {
				if (!obj['must'] && !obj['must_not'] && !obj['should']) {
					newObj = {'geo_distance': obj};
				} else {
					['must', 'must_not', 'should'].forEach(propName => {
						if (obj[propName]) {
							newObj[propName] = obj[propName].map(filter => {
								if (filter['query_fields'] || filter['query_string']) 
									return restructObj(filter, 'fulltext_filter');
								else 
									return restructObj(filter, 'attr_filter');
							});
						}
					});
					newObj = {'bool': newObj};
				}
			}
		} else {
			let keyPropName = obj['attr'] ? 'attr' : 'name';
			keyPropVal = obj[keyPropName];
			delete obj[keyPropName];
			newObj[keyPropVal] = obj;
		}
		
		return newObj;
	  };

	  let restructNestedObj = function(nestedObj, propNames) {
	    let newProp = {};
	  	nestedObj[nestedObj.length-1].forEach( propVal => {
			let oldProp = restructObj(propVal, propNames[propNames.length-1]);
			newProp = {...newProp, ...oldProp};
		});
		nestedObj[nestedObj.length-1] = newProp;
	  	
		for (let i=propNames.length-1; i >=0; i--) {
			nestedObj[i][propNames[i]] = nestedObj[i+1];
		}
	  };   

	  if (postBody['sort']) {
		postBody['sort'] = postBody['sort'].map(
			sort => restructObj(sort, 'sort')
		);
	  }

	  if (postBody['fulltext_filter'] || postBody['attr_filter']) {
		postBody['query'] = {};
		let filterObj;
		['fulltext_filter', 'attr_filter'].forEach(propName => {
			if (postBody[propName]) {
				filterObj = restructObj(postBody[propName], propName);
				postBody['query'] = {...postBody['query'], ...filterObj};
				delete postBody[propName];
			}
		});
	  }
	  
	  ['highlight.fields'].forEach(propSign => {
		const propNames = propSign.split('.');
		let nestedObj = [postBody];
		for (let i=0; i < propNames.length; i++) {
			if (!nestedObj[i][propNames[i]]) {
				return;
			}
			nestedObj.push(nestedObj[i][propNames[i]]);
		}
		
		restructNestedObj(nestedObj, propNames);
	  });

      </vendorExtensions.x-is_search>

      var pathParams = {<#pathParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></pathParams>
      };
      var queryParams = {<#queryParams><^collectionFormat>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required>,</collectionFormat></queryParams>
      };
      var collectionQueryParams = {<#queryParams><#collectionFormat>
        '<baseName>': {
          value: <#required><paramName></required><^required>opts['<paramName>']</required>,
          collectionFormat: '<collectionFormat>'
        },</collectionFormat></queryParams>
      };
      var headerParams = {<#headerParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></headerParams>
      };
      var formParams = {<#formParams>
        '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></formParams>
      };

      var authNames = [<#authMethods>'<name>'<#hasMore>, </hasMore></authMethods>];
      var contentTypes = [<#consumes>'<& mediaType>'<#hasMore>, </hasMore></consumes>];
      var accepts = [<#produces>'<& mediaType>'<#hasMore>, </hasMore></produces>];
      var returnType = <#vendorExtensions.x-return-type><&vendorExtensions.x-return-type></vendorExtensions.x-return-type><^vendorExtensions.x-return-type>null</vendorExtensions.x-return-type>;
      <#vendorExtensions.x-is_sql>
      if ('rawResponse' in opts && !opts.rawResponse) 
        returnType = Object;
      </vendorExtensions.x-is_sql>
      <#servers.0>
      let basePaths = [<#servers>'<url>'<^-last>, </-last></servers>];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index'] < 0 || opts['_base_path_index'] >= basePaths.length) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      </servers.0>
      return this.apiClient.callApi(
        '<&path>', '<httpMethod>',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, <#servers.0>basePath</servers.0><^servers.0>null</servers.0><^usePromises>, callback</usePromises>
      ).then( function(res) {
        <#vendorExtensions.x-is_sql>
        if ('rawResponse' in opts && !opts.rawResponse)
          res['data'] = [ res['data'] ];
        </vendorExtensions.x-is_sql>
        return res;
      });
    }
<#usePromises>
    <#emitJSDoc>

    /**<#summary>
     * <&summary></summary><#notes>
     * <&notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <&paramName> <&description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<&paramName> <&description><#defaultValue> (default to <&.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<&operationId>Callback} callback The callback function, accepting three arguments: error, data, response<#returnType>
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with data of type {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises>
     */
</emitJSDoc>    this.<operationId> = function(<vendorExtensions.x-codegen-arg-list>) {
      return this.<operationId>WithHttpInfo(<vendorExtensions.x-codegen-arg-list>)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
</usePromises>
</operation></operations>  };

  return exports;
}));<={{ }}=>
