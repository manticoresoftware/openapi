# coding: utf-8

{{>licenseInfo}}

import pprint
import re  # noqa: F401

import six

from {{packageName}}.configuration import Configuration

{{#models}}
{{#model}}
class {{classname}}(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

{{#allowableValues}}
    allowable_values = [{{#enumVars}}{{name}}{{^-last}}, {{/-last}}{{/enumVars}}]  # noqa: E501

{{/allowableValues}}
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
{{#vars}}
        '{{name}}': '{{{dataType}}}'{{^-last}},{{/-last}}
{{/vars}}
    }

    attribute_map = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{^-last}},{{/-last}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
{{#children}}
        '{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},{{/-last}}
{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}, local_vars_configuration=None):  # noqa: E501
        """{{classname}} - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = None
{{/vars}}
        self.discriminator = {{#discriminator}}'{{{discriminatorName}}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
{{#vars}}{{#-first}}
{{/-first}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
{{#isNullable}}
        self.{{name}} = {{name}}
{{/isNullable}}
{{^isNullable}}
        if {{name}} is not None:
            self.{{name}} = {{name}}
{{/isNullable}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.  # noqa: E501

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :return: The {{name}} of this {{classname}}.  # noqa: E501
        :rtype: {{dataType}}
        """
{{#vendorExtensions.x-is_query}}
        return self._{{name}}.to_dict()
{{/vendorExtensions.x-is_query}}
{{^vendorExtensions.x-is_query}}
        return self._{{name}}
{{/vendorExtensions.x-is_query}}
    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.  # noqa: E501
        :type {{name}}: {{dataType}}
        """
{{^isNullable}}
{{#required}}
        if self.local_vars_configuration.client_side_validation and {{name}} is None:  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")  # noqa: E501
{{/required}}
{{/isNullable}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isListContainer}}
        if (self.local_vars_configuration.client_side_validation and
                not set({{{name}}}).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if (self.local_vars_configuration.client_side_validation and
                not set({{{name}}}.keys()).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and {{{name}}} not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"  # noqa: E501
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and len({{name}}) > {{maxLength}}):
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
{{/maxLength}}
{{#minLength}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and len({{name}}) < {{minLength}}):
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
{{/minLength}}
{{#maximum}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}):  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
{{/maximum}}
{{#minimum}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}):  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
{{/minimum}}
{{#pattern}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}})):  # noqa: E501
            raise ValueError(r"Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")  # noqa: E501
{{/pattern}}
{{#maxItems}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and len({{name}}) > {{maxItems}}):
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
{{/maxItems}}
{{#minItems}}
        if (self.local_vars_configuration.client_side_validation and
                {{name}} is not None and len({{name}}) < {{minItems}}):
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{name}} = {{name}}
        
        {{#vendorExtensions.x-is_req_query}}
        if self.fulltext_filter is not None:
        	self.fulltext_filter = None;
       	if self.attr_filter is not None:
        	self.attr_filter = None;
		{{/vendorExtensions.x-is_req_query}}

{{/vars}}

{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
    def to_dict(self):
        """Returns the model properties as a dict"""
		{{#vendorExtensions.x-is_sort_order}}
        result = { self._attr: {'order': self._order} }
		{{/vendorExtensions.x-is_sort_order}}
		{{#vendorExtensions.x-is_sort_mva}}
        result = { self._attr: {'order': self._order, 'mode': self._mode} }
		{{/vendorExtensions.x-is_sort_mva}}
		{{#vendorExtensions.x-is_match_filter}}
        result = { 'match': {self._query_fields: self._query_string} }
		{{/vendorExtensions.x-is_match_filter}}
		{{#vendorExtensions.x-is_match_phrase_filter}}
        result = { 'match_phrase': {self._query_fields: self._query_phrase} }
		{{/vendorExtensions.x-is_match_phrase_filter}}
		{{#vendorExtensions.x-is_match_op_filter}}
        result = { 'match': {self._query_fields: {'query': self._query_string, 'operator': self._operator } } }
		{{/vendorExtensions.x-is_match_op_filter}}
		{{#vendorExtensions.x-is_equals_filter}}
        result = { 'equals': {self._field: self._value } }
		{{/vendorExtensions.x-is_equals_filter}}
		{{#vendorExtensions.x-is_in_filter}}
        result = { 'in': {self._field: self._values } }
		{{/vendorExtensions.x-is_in_filter}}
		{{#vendorExtensions.x-is_range_filter}}
        result = { 'range': {self._field: { 'gte': self._gte, 'lte': self._lte, 'gt': self._gt, 'lt': self._lt } } }
        result['range'][self._field] = {k:v for k,v in result['range'][self._field].items() if v is not None}
		{{/vendorExtensions.x-is_range_filter}}

		{{^vendorExtensions.x-is_range_filter}}
		{{^vendorExtensions.x-is_in_filter}}
		{{^vendorExtensions.x-is_equals_filter}}
		{{^vendorExtensions.x-is_match_op_filter}}
		{{^vendorExtensions.x-is_match_phrase_filter}}
		{{^vendorExtensions.x-is_match_filter}}
		{{^vendorExtensions.x-is_sort_order}}
		{{^vendorExtensions.x-is_sort_mva}}
        result = {}		
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        {{/vendorExtensions.x-is_sort_mva}}
        {{/vendorExtensions.x-is_sort_order}}
        {{/vendorExtensions.x-is_match_filter}}
        {{/vendorExtensions.x-is_match_phrase_filter}}
        {{/vendorExtensions.x-is_match_op_filter}}
        {{/vendorExtensions.x-is_equals_filter}}
        {{/vendorExtensions.x-is_in_filter}}
        {{/vendorExtensions.x-is_range_filter}}

        {{#vendorExtensions.x-is_geo_filter}}
        result = { 'geo_distance': result }
		{{/vendorExtensions.x-is_geo_filter}}
        {{#vendorExtensions.x-is_bool_filter}}
        result = { "bool": {k:v for k,v in result.items() if v is not None } }
		{{/vendorExtensions.x-is_bool_filter}}
        {{#vendorExtensions.x-is_highlight_field}}
        result = { result['name']: {k:v for k,v in result.items() if k != 'name' and v is not None} }
        {{/vendorExtensions.x-is_highlight_field}}
        {{#vendorExtensions.x-is_req_highlight}}
        if result['fields'] is not None:
            result['fields'] = {k:v for i in result['fields'] for k,v in i.items() if v is not None}
        {{/vendorExtensions.x-is_req_highlight}}

        {{#vendorExtensions.x-is_search_req}}
        result['_source'] = result['source']
        del result['source']
        if result['aggs'] is not None:
        	for k,v in result['aggs'].items():
        		if v['sort'] is None:
        			result['aggs'][k]['sort'] = []
        if result['highlight'] is not None:
	        if result['highlight']['fields'] is None: 	
	            result['highlight']['fields'] = result['highlight']['fieldnames']
	        result['highlight']['fieldnames'] = None
	        result['highlight'] = {k:v for k,v in result['highlight'].items() if v is not None}
        
        if result['fulltext_filter'] is not None or result['attr_filter'] is not None:
            result['query'] = {}
        if result['fulltext_filter'] is not None:
            for k,v in result['fulltext_filter'].items():
                result['query'][k] = v
            del result['fulltext_filter']
        if result['attr_filter'] is not None:
            for k,v in result['attr_filter'].items():
                result['query'][k] = v
            del result['attr_filter']
        {{/vendorExtensions.x-is_search_req}}

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, {{classname}}):
            return True

        return self.to_dict() != other.to_dict()
{{/model}}
{{/models}}
