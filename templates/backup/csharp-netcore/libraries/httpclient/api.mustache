{{>partial_header}}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using System.Web;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.Dynamic;


namespace {{packageName}}.{{apiPackage}}
{
    {{#operations}}

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}Sync : IApiAccessor
    {
        #region Synchronous Operations
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        {{#notes}}
        /// <remarks>
        /// {{.}}
        /// </remarks>
        {{/notes}}
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>{{returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{{returnType}}}{{^returnType}}void{{/returnType}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}});

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        ApiResponse<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}});
        {{/operation}}
        #endregion Synchronous Operations
    }

    {{#supportsAsync}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}Async : IApiAccessor
    {
        #region Asynchronous Operations
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of {{returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{#returnType}}System.Threading.Tasks.Task<{{{.}}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        System.Threading.Tasks.Task<ApiResponse<{{{returnType}}}{{^returnType}}Object{{/returnType}}>> {{operationId}}WithHttpInfoAsync({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        {{/operation}}
        #endregion Asynchronous Operations
    }
    {{/supportsAsync}}

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}} : {{interfacePrefix}}{{classname}}Sync{{#supportsAsync}}, {{interfacePrefix}}{{classname}}Async{{/supportsAsync}}
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} partial class {{classname}} : IDisposable, {{interfacePrefix}}{{classname}}
    {
        private {{packageName}}.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public {{classname}}() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public {{classname}}(string basePath)
        {
            this.Configuration = {{packageName}}.Client.Configuration.MergeConfigurations(
                {{packageName}}.Client.GlobalConfiguration.Instance,
                new {{packageName}}.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new {{packageName}}.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            {{#supportsAsync}}
            this.AsynchronousClient = this.ApiClient;
            {{/supportsAsync}}
            this.ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public {{classname}}({{packageName}}.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = {{packageName}}.Client.Configuration.MergeConfigurations(
                {{packageName}}.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new {{packageName}}.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            {{#supportsAsync}}
            this.AsynchronousClient = this.ApiClient;
            {{/supportsAsync}}
            ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public {{classname}}(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public {{classname}}(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = {{packageName}}.Client.Configuration.MergeConfigurations(
                {{packageName}}.Client.GlobalConfiguration.Instance,
                new {{packageName}}.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new {{packageName}}.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            {{#supportsAsync}}
            this.AsynchronousClient = this.ApiClient;
            {{/supportsAsync}}
            this.ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public {{classname}}(HttpClient client, {{packageName}}.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = {{packageName}}.Client.Configuration.MergeConfigurations(
                {{packageName}}.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new {{packageName}}.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            {{#supportsAsync}}
            this.AsynchronousClient = this.ApiClient;
            {{/supportsAsync}}
            ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>{{#supportsAsync}}
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>{{/supportsAsync}}
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public {{classname}}({{packageName}}.Client.ISynchronousClient client, {{#supportsAsync}}{{packageName}}.Client.IAsynchronousClient asyncClient, {{/supportsAsync}}{{packageName}}.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            {{#supportsAsync}}
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            {{/supportsAsync}}
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            {{#supportsAsync}}
            this.AsynchronousClient = asyncClient;
            {{/supportsAsync}}
            this.Configuration = configuration;
            this.ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public {{packageName}}.Client.ApiClient ApiClient { get; set; } = null;

        {{#supportsAsync}}
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public {{packageName}}.Client.IAsynchronousClient AsynchronousClient { get; set; }
        {{/supportsAsync}}

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public {{packageName}}.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public {{packageName}}.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public {{packageName}}.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>{{returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{{returnType}}}{{^returnType}}void{{/returnType}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})
        {
            {{#returnType}}{{packageName}}.Client.ApiResponse<{{{returnType}}}> localVarResponse = {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
            return localVarResponse.Data;{{/returnType}}{{^returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{packageName}}.Client.ApiResponse<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})
        {
        	{{#vendorExtensions.x-is_modify}}
        	{{#allParams}}
        	{{#-first}}
        	var dict = JsonConvert.DeserializeObject<JObject>(JsonConvert.SerializeObject({{paramName}}));
        	if (dict.ContainsKey("id") && dict.ContainsKey("query"))
	 		{
	 			dict.Remove("query");
	 		}
	 		{{/-first}}
	 		{{/allParams}}
        	{{/vendorExtensions.x-is_modify}}
        	
			{{#vendorExtensions.x-is_search}}
            JObject RestructObj(JObject obj, string objType)
 			{
 			    if (!obj.ContainsKey("attr") && !obj.ContainsKey("name") && !obj.ContainsKey("query_fields") && !obj.ContainsKey("value") && !obj.ContainsKey("values")
 			        && !obj.ContainsKey("field") && !obj.ContainsKey("location_anchor") && !obj.ContainsKey("must") && !obj.ContainsKey("must_not") && !obj.ContainsKey("should"))
 			    {
 			        return obj;
 			    }
 			    
 			    var newObj = new JObject();
 			    string keyPropVal;
 			    
 			    if (objType == "fulltext_filter")
				{
				    if (obj.ContainsKey("query_fields"))
				    {
				        keyPropVal = (string)obj["query_fields"];
				        if (obj.ContainsKey("query_phrase"))
				        {
				            var matchPhraseObj = new JObject();
				            matchPhraseObj[keyPropVal] = obj["query_phrase"];
				            newObj["match_phrase"] = matchPhraseObj;
				        }
				        else
				        {
				            var matchObj = new JObject();
				            matchObj[keyPropVal] = obj.ContainsKey("operator")
				                ? new JObject { { "query", obj["query_string"] }, { "operator", obj["operator"] } }
				                : obj["query_string"];
				            newObj["match"] = matchObj;
				        }
				    }
				    else
				    {
				        newObj = obj;
				    }
				}
				else if (objType == "attr_filter")
			    {
			        if (obj.ContainsKey("field"))
			        {
			            keyPropVal = (string)obj["field"];
			            if (obj.ContainsKey("value"))
			            {
			                var equalsObj = new JObject();
			                equalsObj[keyPropVal] = obj["value"];
			                newObj["equals"] = equalsObj;
			            }
			            else if (obj.ContainsKey("values"))
			            {
			                var inObj = new JObject();
			                inObj[keyPropVal] = obj["values"];
			                newObj["in"] = inObj;
			            }
			            else
			            {
			            	obj.Remove("field");
							// Check if the filter's values are actually integers
                            new[] { "gte", "lte", "gt", "lt" }.ToList().ForEach(propName => 
                            {
                                decimal? propVal = (decimal?)obj[propName];
                                if (propVal.HasValue && Math.Round((decimal)propVal) == propVal)
                                {
                                    obj[propName] = (int)propVal;
                                }
                            });

			                newObj[keyPropVal] = obj;
			                newObj = new JObject { { "range", newObj } };
			            }
			        }
			        else 
			        {
			        	if (!obj.ContainsKey("must") && !obj.ContainsKey("must_not") && !obj.ContainsKey("should")) 
			        	{
							newObj["geo_distance"] = obj;
						} else 
						{
							JObject RestructFilter(JObject filter)
							{
								return (filter.ContainsKey("query_fields") || filter.ContainsKey("query_string"))
									? RestructObj(filter, "fulltext_filter")
									: RestructObj(filter, "attr_filter");
							}

							new[] {"must", "must_not", "should"}.ToList().ForEach(propName =>
							{
								if (obj.ContainsKey(propName) && obj[propName] != null) {
									
									newObj[propName] = JArray.FromObject(
										obj[propName].Select( filter => RestructFilter((JObject)filter) )
									);
								}
							});
							
							newObj = new JObject { { "bool", newObj } };
						}
			        }
			    } 
				else {
	 			    var keyPropName = obj.ContainsKey("attr") ? "attr" : "name";
	 		        keyPropVal = (string)obj[keyPropName];
	 		        obj.Remove(keyPropName);
			        newObj[keyPropVal] = obj;
	 		    }
 		        
 		        return newObj;
 			}
 			
 			JObject RestructNestedObj(List<JContainer> nestedObj, List<string> propNames)
			{
			    var newProp = new JObject();
			    foreach (JObject propVal in (JArray)nestedObj[nestedObj.Count - 1])
			    {
			        var oldProp = RestructObj(propVal, propNames[propNames.Count - 1]);
			        newProp.Merge(oldProp);
			    }
			    nestedObj[nestedObj.Count - 1] = newProp;
			
			    for (int i = propNames.Count - 1; i >= 0; i--)
			    {
			        nestedObj[i][propNames[i]] = nestedObj[i + 1];
			    }
			    
			    return (JObject)nestedObj[0];
			}
            {{/vendorExtensions.x-is_search}}

            {{#allParams}}
            {{#required}}
            {{^vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}.Client.ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/vendorExtensions.x-csharp-value-type}}
            {{/required}}
            {{/allParams}}
            {{packageName}}.Client.RequestOptions localVarRequestOptions = new {{packageName}}.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                {{#consumes}}
                "{{{mediaType}}}"{{^-last}},{{/-last}}
                {{/consumes}}
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                {{#produces}}
                "{{{mediaType}}}"{{^-last}},{{/-last}}
                {{/produces}}
            };

            var localVarContentType = {{packageName}}.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = {{packageName}}.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            {{#pathParams}}
            {{#required}}
            localVarRequestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // path parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                localVarRequestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // path parameter
            }
            {{/required}}
            {{/pathParams}}
            {{#queryParams}}
            {{#required}}
            {{#isDeepObject}}
            {{#items.vars}}
            localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}.{{name}}));
            {{/items.vars}}
            {{^items}}
            localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("deepObject", "{{baseName}}", {{paramName}}));
            {{/items}}
            {{/isDeepObject}}
            {{^isDeepObject}}
            localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
            {{/isDeepObject}}
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                {{#isDeepObject}}
                    {{#items.vars}}
                if ({{paramName}}.{{name}} != null)
                {
                    localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}.{{name}}));
                }
                    {{/items.vars}}
                {{^items}}
                localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("deepObject", "{{baseName}}", {{paramName}}));
                {{/items}}
                {{/isDeepObject}}
                {{^isDeepObject}}
                localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
                {{/isDeepObject}}
            }
            {{/required}}
            {{/queryParams}}
            {{#headerParams}}
            {{#required}}
            localVarRequestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // header parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                localVarRequestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // header parameter
            }
            {{/required}}
            {{/headerParams}}
            {{#formParams}}
            {{#required}}
            {{#isFile}}
            localVarRequestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
            {{/isFile}}
            {{^isFile}}
            localVarRequestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // form parameter
            {{/isFile}}
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                {{#isFile}}
                localVarRequestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
                {{/isFile}}
                {{^isFile}}
                localVarRequestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // form parameter
                {{/isFile}}
            }
            {{/required}}
            {{/formParams}}
            {{#vendorExtensions.x-is_search}}
            {{#bodyParam}}
			JsonSerializerSettings convertSettings = new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore};
            var dict = JsonConvert.DeserializeObject<JObject>(JsonConvert.SerializeObject(searchRequest, convertSettings));
			
			if (dict.ContainsKey("source")) 
			{
 				dict["_source"] = dict["source"];
 				dict.Remove("source");
 			}
 
 			if (dict.ContainsKey("sort"))
 			{
	 		    var sortList = new JArray();
	 		    foreach (object sort in (JArray)dict["sort"])
	 		    {
	 		    	if (sort is JObject)
	 		    	{
	 		        	sortList.Add(RestructObj((JObject)sort, "sort"));
	 		        }
	 		        else
	 		        {
	 		        	sortList.Add(sort);
	 		        } 
	 		    }
	 		    dict["sort"] = sortList;
	 		}
	 		
	 		if (dict.ContainsKey("highlight"))
	 		{
	 			var highlightDict = (JObject)dict["highlight"];
	 			if (highlightDict.ContainsKey("highlight_query"))
	 			{
	 				highlightDict.Remove("highlight_query");
	 			}
	 		}
 		    
 		    if (dict.ContainsKey("fulltext_filter") || dict.ContainsKey("attr_filter")) {
				var query = new JObject();
				var filterObj = new JObject();
				
				new[] { "fulltext_filter", "attr_filter" }.ToList().ForEach(propName => 
				{
					if (dict.ContainsKey(propName)) {
						filterObj = RestructObj((JObject)dict[propName], propName);
						query.Merge(filterObj);
						dict.Remove(propName);
					}
				});
				
				dict["query"] = query;
			}
 		    
 		    new[] { "highlight.fields" }.ToList().ForEach(propSign =>
			{
			    var propNames = propSign.Split('.').ToList();
			    var nestedObj = new List<JContainer> { dict };
			    for (int i = 0; i < propNames.Count; i++)
			    {
		        	var subObj =  (JObject)nestedObj[i];
		        	if (!subObj.ContainsKey(propNames[i]))
		            	return;
					nestedObj.Add((JContainer)nestedObj[i][propNames[i]]);
			    }
			
			    dict = RestructNestedObj(nestedObj, propNames);
			});
						
			localVarRequestOptions.Data = dict;
            {{/bodyParam}}
            {{/vendorExtensions.x-is_search}}
            {{#vendorExtensions.x-is_modify}}
            {{#bodyParam}}
            localVarRequestOptions.Data = dict;
            {{/bodyParam}}
            {{/vendorExtensions.x-is_modify}}
            {{^vendorExtensions.x-is_search}}
            {{^vendorExtensions.x-is_modify}}
            {{#bodyParam}}
            localVarRequestOptions.Data = {{paramName}};
            {{/bodyParam}}
            {{/vendorExtensions.x-is_modify}}
            {{/vendorExtensions.x-is_search}}
		    {{^bodyParam}}
		    localVarRequestOptions.Data = null;
		    {{/bodyParam}}
		    {{#vendorExtensions.x-is_sql}}
			if  (localVarRequestOptions.Data != null) 
			{
			  if  (rawResponse == false) 
			  {
			    localVarRequestOptions.Data = "query=" + HttpUtility.UrlEncode( body.ToString() ).Replace("+", "%20");
			  } else 
			  {
			    localVarRequestOptions.Data = "mode=raw&query=" + HttpUtility.UrlEncode( body.ToString() ).Replace("+", "%20");
			  }
			}
		    {{/vendorExtensions.x-is_sql}}

            {{#authMethods}}
            // authentication ({{name}}) required
            {{#isApiKey}}
            {{#isKeyInCookie}}
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInCookie}}
            {{#isKeyInHeader}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.HeaderParameters.Add("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}"));
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasicBasic}}
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + {{packageName}}.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            {{/isBasicBasic}}
            {{#isBasicBearer}}
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/isBasicBearer}}
            {{#isOAuth}}
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/isOAuth}}
            {{#isHttpSignature}}
            if (this.Configuration.HttpSigningConfiguration != null)
            {
                var HttpSigningHeaders = this.Configuration.HttpSigningConfiguration.GetHttpSignedHeader(this.Configuration.BasePath, "{{{httpMethod}}}", "{{{path}}}", localVarRequestOptions);
                foreach (var headerItem in HttpSigningHeaders)
                {
                    if (localVarRequestOptions.HeaderParameters.ContainsKey(headerItem.Key))
                    {
                        localVarRequestOptions.HeaderParameters[headerItem.Key] = new List<string>() { headerItem.Value };
                    }
                    else
                    {
                        localVarRequestOptions.HeaderParameters.Add(headerItem.Key, headerItem.Value);
                    }
                }
            }
            {{/isHttpSignature}}
            {{/authMethods}}

            // make the HTTP request
            {{#vendorExtensions.x-is_sql}}
            var localVarResponse = new {{packageName}}.Client.ApiResponse<List<Object>>( new HttpStatusCode(), null);
            if  (rawResponse == false) 
            {
                var res = this.Client.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}<Object>("{{{path}}}", localVarRequestOptions, this.Configuration);
                List<Object> resList = new List<Object>();
                resList.Add( res.Data );
                localVarResponse = new {{packageName}}.Client.ApiResponse<{{{returnType}}}{{^returnType}}Object{{/returnType}}>(res.StatusCode, res.Headers, resList);
            } else 
            {
                localVarResponse = this.Client.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}<{{{returnType}}}{{^returnType}}Object{{/returnType}}>("{{{path}}}", localVarRequestOptions, this.Configuration);
            }
            {{/vendorExtensions.x-is_sql}}
            {{^vendorExtensions.x-is_sql}}
            var localVarResponse = this.Client.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}<{{{returnType}}}{{^returnType}}Object{{/returnType}}>("{{{path}}}", localVarRequestOptions, this.Configuration);
			{{/vendorExtensions.x-is_sql}}
			
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("{{operationId}}", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        {{#supportsAsync}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of {{returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{#returnType}}public async System.Threading.Tasks.Task<{{{.}}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            {{#returnType}}{{packageName}}.Client.ApiResponse<{{{returnType}}}> localVarResponse = await {{operationId}}WithHttpInfoAsync({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;{{/returnType}}{{^returnType}}await {{operationId}}WithHttpInfoAsync({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}cancellationToken).ConfigureAwait(false);{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public async System.Threading.Tasks.Task<{{packageName}}.Client.ApiResponse<{{{returnType}}}{{^returnType}}Object{{/returnType}}>> {{operationId}}WithHttpInfoAsync({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            {{#allParams}}
            {{#required}}
            {{^vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}.Client.ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/vendorExtensions.x-csharp-value-type}}
            {{/required}}
            {{/allParams}}

            {{packageName}}.Client.RequestOptions localVarRequestOptions = new {{packageName}}.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                {{#consumes}}
                "{{{mediaType}}}"{{^-last}}, {{/-last}}
                {{/consumes}}
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                {{#produces}}
                "{{{mediaType}}}"{{^-last}},{{/-last}}
                {{/produces}}
            };


            var localVarContentType = {{packageName}}.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = {{packageName}}.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            {{#pathParams}}
            {{#required}}
            localVarRequestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // path parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                localVarRequestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // path parameter
            }
            {{/required}}
            {{/pathParams}}
            {{#queryParams}}
            {{#required}}
            localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
            }
            {{/required}}
            {{/queryParams}}
            {{#headerParams}}
            {{#required}}
            localVarRequestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // header parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                localVarRequestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // header parameter
            }
            {{/required}}
            {{/headerParams}}
            {{#formParams}}
            {{#required}}
            {{#isFile}}
            localVarRequestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
            {{/isFile}}
            {{^isFile}}
            localVarRequestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // form parameter
            {{/isFile}}
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                {{#isFile}}
                localVarRequestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
                {{/isFile}}
                {{^isFile}}
                localVarRequestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.Client.ClientUtils.ParameterToString({{paramName}})); // form parameter
                {{/isFile}}
            }
            {{/required}}
            {{/formParams}}
            {{#bodyParam}}
            localVarRequestOptions.Data = {{paramName}};
            {{/bodyParam}}

            {{#authMethods}}
            // authentication ({{name}}) required
            {{#isApiKey}}
            {{#isKeyInCookie}}
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInCookie}}
            {{#isKeyInHeader}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.HeaderParameters.Add("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}"));
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarRequestOptions.QueryParameters.Add({{packageName}}.Client.ClientUtils.ParameterToMultiMap("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            {{#isBasicBasic}}
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + {{packageName}}.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            {{/isBasicBasic}}
            {{#isBasicBearer}}
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/isBasicBearer}}
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/isOAuth}}
            {{#isHttpSignature}}
            if (this.Configuration.HttpSigningConfiguration != null)
            {
                var HttpSigningHeaders = this.Configuration.HttpSigningConfiguration.GetHttpSignedHeader(this.Configuration.BasePath, "{{{httpMethod}}}", "{{{path}}}", localVarRequestOptions);
                foreach (var headerItem in HttpSigningHeaders)
                {
                    if (localVarRequestOptions.HeaderParameters.ContainsKey(headerItem.Key))
                    {
                        localVarRequestOptions.HeaderParameters[headerItem.Key] = new List<string>() { headerItem.Value };
                    }
                    else
                    {
                        localVarRequestOptions.HeaderParameters.Add(headerItem.Key, headerItem.Value);
                    }
                }
            }
            {{/isHttpSignature}}
            {{/authMethods}}

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}Async<{{{returnType}}}{{^returnType}}Object{{/returnType}}>("{{{path}}}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("{{operationId}}", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        {{/supportsAsync}}
        {{/operation}}
    }
    {{/operations}}
}
