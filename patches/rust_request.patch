diff --git  a/out/manticoresearch-rust/src/apis/request.rs  b/out/manticoresearch-rust/src/apis/request.rs
index 8902fb3..faa57b8 100644
--- a/out/manticoresearch-rust/src/apis/request.rs
+++ b/out/manticoresearch-rust/src/apis/request.rs
@@ -1,6 +1,7 @@
 use std::collections::HashMap;
 use std::pin::Pin;
 
+use fancy_regex::Regex;
 use futures;
 use futures::Future;
 use futures::future::*;
@@ -207,9 +208,26 @@ impl Request {
             }
             req_builder.body(enc.finish())
         } else if let Some(body) = self.serialized_body {
-            req_headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
-            req_headers.insert(CONTENT_LENGTH, body.len().into());
-            req_builder.body(body)
+            let req_len;
+            let mut req_body;
+            let content_type;
+            if body[0..1] == "\"".to_string() {
+                req_len = body.len()-2;
+                req_body = body[1..body.len()-1].to_string();
+            } else {
+                req_len = body.len();
+                req_body = body.to_string();
+            }
+            if path == "/bulk".to_string() {
+                content_type = HeaderValue::from_static("application/x-ndjson");
+                let re = Regex::new(r#"(?<!\\)\\\""#).unwrap();
+                req_body = re.replace_all(req_body.as_str(), "\"").to_string();
+            } else {
+                content_type = HeaderValue::from_static("application/json");
+            }
+            req_headers.insert(CONTENT_TYPE, content_type);
+            req_headers.insert(CONTENT_LENGTH, req_len.into());
+            req_builder.body(req_body)
         } else {
             req_builder.body(String::new())
         };
@@ -217,7 +235,6 @@ impl Request {
             Ok(request) => request,
             Err(e) => return Box::pin(futures::future::err(Error::from(e)))
         };
-
         let no_return_type = self.no_return_type;
         Box::pin(conf.client
             .request(request)


