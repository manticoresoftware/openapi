/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RangeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeFilter{}

// RangeFilter struct for RangeFilter
type RangeFilter struct {
	Range map[string]RangeFilterRangeValue `json:"range,omitempty"`
}

// NewRangeFilter instantiates a new RangeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeFilter() *RangeFilter {
	this := RangeFilter{}
	return &this
}

// NewRangeFilterWithDefaults instantiates a new RangeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeFilterWithDefaults() *RangeFilter {
	this := RangeFilter{}
	return &this
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *RangeFilter) GetRange() map[string]RangeFilterRangeValue {
	if o == nil || IsNil(o.Range) {
		var ret map[string]RangeFilterRangeValue
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeFilter) GetRangeOk() (map[string]RangeFilterRangeValue, bool) {
	if o == nil || IsNil(o.Range) {
		return map[string]RangeFilterRangeValue{}, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *RangeFilter) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given map[string]RangeFilterRangeValue and assigns it to the Range field.
func (o *RangeFilter) SetRange(v map[string]RangeFilterRangeValue) {
	o.Range = v
}

func (o RangeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	return toSerialize, nil
}

type NullableRangeFilter struct {
	value *RangeFilter
	isSet bool
}

func (v NullableRangeFilter) Get() *RangeFilter {
	return v.value
}

func (v *NullableRangeFilter) Set(val *RangeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeFilter(val *RangeFilter) *NullableRangeFilter {
	return &NullableRangeFilter{value: val, isSet: true}
}

func (v NullableRangeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


