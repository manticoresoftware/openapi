/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SqlObjResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlObjResponse{}

// SqlObjResponse struct for SqlObjResponse
type SqlObjResponse struct {
	Hits map[string]interface{} `json:"hits"`
	Took *float32 `json:"took,omitempty"`
	TimedOut *bool `json:"timed_out,omitempty"`
}

type _SqlObjResponse SqlObjResponse

// NewSqlObjResponse instantiates a new SqlObjResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlObjResponse(hits map[string]interface{}) *SqlObjResponse {
	this := SqlObjResponse{}
	this.Hits = hits
	return &this
}

// NewSqlObjResponseWithDefaults instantiates a new SqlObjResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlObjResponseWithDefaults() *SqlObjResponse {
	this := SqlObjResponse{}
	return &this
}

// GetHits returns the Hits field value
func (o *SqlObjResponse) GetHits() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value
// and a boolean to check if the value has been set.
func (o *SqlObjResponse) GetHitsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Hits, true
}

// SetHits sets field value
func (o *SqlObjResponse) SetHits(v map[string]interface{}) {
	o.Hits = v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *SqlObjResponse) GetTook() float32 {
	if o == nil || IsNil(o.Took) {
		var ret float32
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlObjResponse) GetTookOk() (*float32, bool) {
	if o == nil || IsNil(o.Took) {
		return nil, false
	}
	return o.Took, true
}

// HasTook returns a boolean if a field has been set.
func (o *SqlObjResponse) HasTook() bool {
	if o != nil && !IsNil(o.Took) {
		return true
	}

	return false
}

// SetTook gets a reference to the given float32 and assigns it to the Took field.
func (o *SqlObjResponse) SetTook(v float32) {
	o.Took = &v
}

// GetTimedOut returns the TimedOut field value if set, zero value otherwise.
func (o *SqlObjResponse) GetTimedOut() bool {
	if o == nil || IsNil(o.TimedOut) {
		var ret bool
		return ret
	}
	return *o.TimedOut
}

// GetTimedOutOk returns a tuple with the TimedOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlObjResponse) GetTimedOutOk() (*bool, bool) {
	if o == nil || IsNil(o.TimedOut) {
		return nil, false
	}
	return o.TimedOut, true
}

// HasTimedOut returns a boolean if a field has been set.
func (o *SqlObjResponse) HasTimedOut() bool {
	if o != nil && !IsNil(o.TimedOut) {
		return true
	}

	return false
}

// SetTimedOut gets a reference to the given bool and assigns it to the TimedOut field.
func (o *SqlObjResponse) SetTimedOut(v bool) {
	o.TimedOut = &v
}

func (o SqlObjResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlObjResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hits"] = o.Hits
	if !IsNil(o.Took) {
		toSerialize["took"] = o.Took
	}
	if !IsNil(o.TimedOut) {
		toSerialize["timed_out"] = o.TimedOut
	}
	return toSerialize, nil
}

func (o *SqlObjResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlObjResponse := _SqlObjResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlObjResponse)

	if err != nil {
		return err
	}

	*o = SqlObjResponse(varSqlObjResponse)

	return err
}

type NullableSqlObjResponse struct {
	value *SqlObjResponse
	isSet bool
}

func (v NullableSqlObjResponse) Get() *SqlObjResponse {
	return v.value
}

func (v *NullableSqlObjResponse) Set(val *SqlObjResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlObjResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlObjResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlObjResponse(val *SqlObjResponse) *NullableSqlObjResponse {
	return &NullableSqlObjResponse{value: val, isSet: true}
}

func (v NullableSqlObjResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlObjResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

