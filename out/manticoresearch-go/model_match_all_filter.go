/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchAllFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchAllFilter{}

// MatchAllFilter struct for MatchAllFilter
type MatchAllFilter struct {
	MatchAll *string `json:"match_all,omitempty"`
}

// NewMatchAllFilter instantiates a new MatchAllFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchAllFilter() *MatchAllFilter {
	this := MatchAllFilter{}
	return &this
}

// NewMatchAllFilterWithDefaults instantiates a new MatchAllFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchAllFilterWithDefaults() *MatchAllFilter {
	this := MatchAllFilter{}
	return &this
}

// GetMatchAll returns the MatchAll field value if set, zero value otherwise.
func (o *MatchAllFilter) GetMatchAll() string {
	if o == nil || IsNil(o.MatchAll) {
		var ret string
		return ret
	}
	return *o.MatchAll
}

// GetMatchAllOk returns a tuple with the MatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchAllFilter) GetMatchAllOk() (*string, bool) {
	if o == nil || IsNil(o.MatchAll) {
		return nil, false
	}
	return o.MatchAll, true
}

// HasMatchAll returns a boolean if a field has been set.
func (o *MatchAllFilter) HasMatchAll() bool {
	if o != nil && !IsNil(o.MatchAll) {
		return true
	}

	return false
}

// SetMatchAll gets a reference to the given string and assigns it to the MatchAll field.
func (o *MatchAllFilter) SetMatchAll(v string) {
	o.MatchAll = &v
}

func (o MatchAllFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchAllFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchAll) {
		toSerialize["match_all"] = o.MatchAll
	}
	return toSerialize, nil
}

type NullableMatchAllFilter struct {
	value *MatchAllFilter
	isSet bool
}

func (v NullableMatchAllFilter) Get() *MatchAllFilter {
	return v.value
}

func (v *NullableMatchAllFilter) Set(val *MatchAllFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchAllFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchAllFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchAllFilter(val *MatchAllFilter) *NullableMatchAllFilter {
	return &NullableMatchAllFilter{value: val, isSet: true}
}

func (v NullableMatchAllFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchAllFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


