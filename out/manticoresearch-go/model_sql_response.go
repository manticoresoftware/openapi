/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SqlResponse - List of responses from executed SQL queries
type SqlResponse struct {
	ArrayOfMapmapOfStringinterface *[]map[string]interface{}
	MapmapOfStringinterface *map[string]interface{}
}

// []map[string]interface{}AsSqlResponse is a convenience function that returns []map[string]interface{} wrapped in SqlResponse
func ArrayOfMapmapOfStringinterfaceAsSqlResponse(v *[]map[string]interface{}) SqlResponse {
	return SqlResponse{
		ArrayOfMapmapOfStringinterface: v,
	}
}

// map[string]interface{}AsSqlResponse is a convenience function that returns map[string]interface{} wrapped in SqlResponse
func MapmapOfStringinterfaceAsSqlResponse(v *map[string]interface{}) SqlResponse {
	return SqlResponse{
		MapmapOfStringinterface: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SqlResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfMapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMapmapOfStringinterface)
	if err == nil {
		jsonArrayOfMapmapOfStringinterface, _ := json.Marshal(dst.ArrayOfMapmapOfStringinterface)
		if string(jsonArrayOfMapmapOfStringinterface) == "{}" { // empty struct
			dst.ArrayOfMapmapOfStringinterface = nil
		} else {
			if err = validator.Validate(dst.ArrayOfMapmapOfStringinterface); err != nil {
				dst.ArrayOfMapmapOfStringinterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfMapmapOfStringinterface = nil
	}

	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface)
	if err == nil {
		jsonMapmapOfStringinterface, _ := json.Marshal(dst.MapmapOfStringinterface)
		if string(jsonMapmapOfStringinterface) == "{}" { // empty struct
			dst.MapmapOfStringinterface = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringinterface); err != nil {
				dst.MapmapOfStringinterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringinterface = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfMapmapOfStringinterface = nil
		dst.MapmapOfStringinterface = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SqlResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SqlResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SqlResponse) MarshalJSON() ([]byte, error) {
	if src.ArrayOfMapmapOfStringinterface != nil {
		return json.Marshal(&src.ArrayOfMapmapOfStringinterface)
	}

	if src.MapmapOfStringinterface != nil {
		return json.Marshal(&src.MapmapOfStringinterface)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SqlResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfMapmapOfStringinterface != nil {
		return obj.ArrayOfMapmapOfStringinterface
	}

	if obj.MapmapOfStringinterface != nil {
		return obj.MapmapOfStringinterface
	}

	// all schemas are nil
	return nil
}

type NullableSqlResponse struct {
	value *SqlResponse
	isSet bool
}

func (v NullableSqlResponse) Get() *SqlResponse {
	return v.value
}

func (v *NullableSqlResponse) Set(val *SqlResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlResponse(val *SqlResponse) *NullableSqlResponse {
	return &NullableSqlResponse{value: val, isSet: true}
}

func (v NullableSqlResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


