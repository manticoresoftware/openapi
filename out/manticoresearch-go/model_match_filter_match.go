/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MatchFilterMatch - struct for MatchFilterMatch
type MatchFilterMatch struct {
	MapmapOfStringstring *map[string]string
	String *string
}

// map[string]stringAsMatchFilterMatch is a convenience function that returns map[string]string wrapped in MatchFilterMatch
func MapmapOfStringstringAsMatchFilterMatch(v *map[string]string) MatchFilterMatch {
	return MatchFilterMatch{
		MapmapOfStringstring: v,
	}
}

// stringAsMatchFilterMatch is a convenience function that returns string wrapped in MatchFilterMatch
func StringAsMatchFilterMatch(v *string) MatchFilterMatch {
	return MatchFilterMatch{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MatchFilterMatch) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil {
		jsonMapmapOfStringstring, _ := json.Marshal(dst.MapmapOfStringstring)
		if string(jsonMapmapOfStringstring) == "{}" { // empty struct
			dst.MapmapOfStringstring = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringstring); err != nil {
				dst.MapmapOfStringstring = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringstring = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringstring = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MatchFilterMatch)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MatchFilterMatch)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MatchFilterMatch) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringstring != nil {
		return json.Marshal(&src.MapmapOfStringstring)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MatchFilterMatch) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringstring != nil {
		return obj.MapmapOfStringstring
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableMatchFilterMatch struct {
	value *MatchFilterMatch
	isSet bool
}

func (v NullableMatchFilterMatch) Get() *MatchFilterMatch {
	return v.value
}

func (v *NullableMatchFilterMatch) Set(val *MatchFilterMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchFilterMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchFilterMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchFilterMatch(val *MatchFilterMatch) *NullableMatchFilterMatch {
	return &NullableMatchFilterMatch{value: val, isSet: true}
}

func (v NullableMatchFilterMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchFilterMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


