/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	_"fmt"
	_"bytes"
	"gopkg.in/validator.v2"
	"fmt"
)

// ResponseError - struct for ResponseError
type ResponseError struct {
	ResponseErrorDetails *ResponseErrorDetails
	String *string
}

// ResponseErrorDetailsAsResponseError is a convenience function that returns ResponseErrorDetails wrapped in ResponseError
func ResponseErrorDetailsAsResponseError(v *ResponseErrorDetails) ResponseError {
	return ResponseError{
		ResponseErrorDetails: v,
	}
}

// stringAsResponseError is a convenience function that returns string wrapped in ResponseError
func StringAsResponseError(v *string) ResponseError {
	return ResponseError{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResponseErrorDetails
	err = newStrictDecoder(data).Decode(&dst.ResponseErrorDetails)
	if err == nil {
		jsonResponseErrorDetails, _ := json.Marshal(dst.ResponseErrorDetails)
		if string(jsonResponseErrorDetails) == "{}" { // empty struct
			dst.ResponseErrorDetails = nil
		} else {
			if err = validator.Validate(dst.ResponseErrorDetails); err != nil {
				dst.ResponseErrorDetails = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseErrorDetails = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResponseErrorDetails = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseError) MarshalJSON() ([]byte, error) {
	if src.ResponseErrorDetails != nil {
		return json.Marshal(&src.ResponseErrorDetails)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ResponseErrorDetails != nil {
		return obj.ResponseErrorDetails
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableResponseError struct {
	value *ResponseError
	isSet bool
}

func (v NullableResponseError) Get() *ResponseError {
	return v.value
}

func (v *NullableResponseError) Set(val *ResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseError(val *ResponseError) *NullableResponseError {
	return &NullableResponseError{value: val, isSet: true}
}

func (v NullableResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


