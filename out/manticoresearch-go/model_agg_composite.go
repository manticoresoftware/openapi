/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AggComposite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggComposite{}

// AggComposite Object to perform composite aggregation, i.e., grouping search results by multiple fields
type AggComposite struct {
	// Maximum number of composite buckets in the result
	Size *int32
	Sources []map[string]AggCompositeSource
}

// NewAggComposite instantiates a new AggComposite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggComposite() *AggComposite {
	this := AggComposite{}
	return &this
}

// NewAggCompositeWithDefaults instantiates a new AggComposite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggCompositeWithDefaults() *AggComposite {
	this := AggComposite{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *AggComposite) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggComposite) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *AggComposite) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *AggComposite) SetSize(v int32) {
	o.Size = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *AggComposite) GetSources() []map[string]AggCompositeSource {
	if o == nil || IsNil(o.Sources) {
		var ret []map[string]AggCompositeSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggComposite) GetSourcesOk() ([]map[string]AggCompositeSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *AggComposite) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []map[string]AggCompositeSource and assigns it to the Sources field.
func (o *AggComposite) SetSources(v []map[string]AggCompositeSource) {
	o.Sources = v
}

func (o AggComposite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggComposite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableAggComposite struct {
	value *AggComposite
	isSet bool
}

func (v NullableAggComposite) Get() *AggComposite {
	return v.value
}

func (v *NullableAggComposite) Set(val *AggComposite) {
	v.value = val
	v.isSet = true
}

func (v NullableAggComposite) IsSet() bool {
	return v.isSet
}

func (v *NullableAggComposite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggComposite(val *AggComposite) *NullableAggComposite {
	return &NullableAggComposite{value: val, isSet: true}
}

func (v NullableAggComposite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggComposite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


