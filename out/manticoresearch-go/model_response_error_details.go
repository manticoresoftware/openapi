/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	_"bytes"
	_"fmt"
)

// checks if the ResponseErrorDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseErrorDetails{}

// ResponseErrorDetails Detailed error information returned in case of an error response
type ResponseErrorDetails struct {
	// Type or category of the error
	Type string `json:"type"` 
	// Detailed explanation of why the error occurred
	Reason NullableString `json:"reason"` 
	// The table related to the error, if applicable
	Table NullableString `json:"table"` 
}

type _ResponseErrorDetails ResponseErrorDetails

// NewResponseErrorDetails instantiates a new ResponseErrorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseErrorDetails(type_ string) *ResponseErrorDetails {
	this := ResponseErrorDetails{}
	this.Type = type_
	return &this
}

// NewResponseErrorDetailsWithDefaults instantiates a new ResponseErrorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseErrorDetailsWithDefaults() *ResponseErrorDetails {
	this := ResponseErrorDetails{}
	return &this
}

// GetType returns the Type field value
func (o *ResponseErrorDetails) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponseErrorDetails) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponseErrorDetails) SetType(v string) {
	o.Type = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseErrorDetails) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseErrorDetails) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *ResponseErrorDetails) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *ResponseErrorDetails) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *ResponseErrorDetails) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *ResponseErrorDetails) UnsetReason() {
	o.Reason.Unset()
}

// GetTable returns the Table field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseErrorDetails) GetTable() string {
	if o == nil || IsNil(o.Table.Get()) {
		var ret string
		return ret
	}
	return *o.Table.Get()
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseErrorDetails) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Table.Get(), o.Table.IsSet()
}

// HasTable returns a boolean if a field has been set.
func (o *ResponseErrorDetails) HasTable() bool {
	if o != nil && o.Table.IsSet() {
		return true
	}

	return false
}

// SetTable gets a reference to the given NullableString and assigns it to the Table field.
func (o *ResponseErrorDetails) SetTable(v string) {
	o.Table.Set(&v)
}
// SetTableNil sets the value for Table to be an explicit nil
func (o *ResponseErrorDetails) SetTableNil() {
	o.Table.Set(nil)
}

// UnsetTable ensures that no value is present for Table, not even an explicit nil
func (o *ResponseErrorDetails) UnsetTable() {
	o.Table.Unset()
}

func (o ResponseErrorDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseErrorDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Table.IsSet() {
		toSerialize["table"] = o.Table.Get()
	}
	return toSerialize, nil
}

type NullableResponseErrorDetails struct {
	value *ResponseErrorDetails
	isSet bool
}

func (v NullableResponseErrorDetails) Get() *ResponseErrorDetails {
	return v.value
}

func (v *NullableResponseErrorDetails) Set(val *ResponseErrorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseErrorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseErrorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseErrorDetails(val *ResponseErrorDetails) *NullableResponseErrorDetails {
	return &NullableResponseErrorDetails{value: val, isSet: true}
}

func (v NullableResponseErrorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseErrorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


