/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// AttrFilter - struct for AttrFilter
type AttrFilter struct {
	EqualsFilter *EqualsFilter
	GeoFilter *GeoFilter
	InFilter *InFilter
	RangeFilter *RangeFilter
}

// EqualsFilterAsAttrFilter is a convenience function that returns EqualsFilter wrapped in AttrFilter
func EqualsFilterAsAttrFilter(v *EqualsFilter) AttrFilter {
	return AttrFilter{
		EqualsFilter: v,
	}
}

// GeoFilterAsAttrFilter is a convenience function that returns GeoFilter wrapped in AttrFilter
func GeoFilterAsAttrFilter(v *GeoFilter) AttrFilter {
	return AttrFilter{
		GeoFilter: v,
	}
}

// InFilterAsAttrFilter is a convenience function that returns InFilter wrapped in AttrFilter
func InFilterAsAttrFilter(v *InFilter) AttrFilter {
	return AttrFilter{
		InFilter: v,
	}
}

// RangeFilterAsAttrFilter is a convenience function that returns RangeFilter wrapped in AttrFilter
func RangeFilterAsAttrFilter(v *RangeFilter) AttrFilter {
	return AttrFilter{
		RangeFilter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AttrFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EqualsFilter
	err = newStrictDecoder(data).Decode(&dst.EqualsFilter)
	if err == nil {
		jsonEqualsFilter, _ := json.Marshal(dst.EqualsFilter)
		if string(jsonEqualsFilter) == "{}" { // empty struct
			dst.EqualsFilter = nil
		} else {
			if err = validator.Validate(dst.EqualsFilter); err != nil {
				dst.EqualsFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.EqualsFilter = nil
	}

	// try to unmarshal data into GeoFilter
	err = newStrictDecoder(data).Decode(&dst.GeoFilter)
	if err == nil {
		jsonGeoFilter, _ := json.Marshal(dst.GeoFilter)
		if string(jsonGeoFilter) == "{}" { // empty struct
			dst.GeoFilter = nil
		} else {
			if err = validator.Validate(dst.GeoFilter); err != nil {
				dst.GeoFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoFilter = nil
	}

	// try to unmarshal data into InFilter
	err = newStrictDecoder(data).Decode(&dst.InFilter)
	if err == nil {
		jsonInFilter, _ := json.Marshal(dst.InFilter)
		if string(jsonInFilter) == "{}" { // empty struct
			dst.InFilter = nil
		} else {
			if err = validator.Validate(dst.InFilter); err != nil {
				dst.InFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.InFilter = nil
	}

	// try to unmarshal data into RangeFilter
	err = newStrictDecoder(data).Decode(&dst.RangeFilter)
	if err == nil {
		jsonRangeFilter, _ := json.Marshal(dst.RangeFilter)
		if string(jsonRangeFilter) == "{}" { // empty struct
			dst.RangeFilter = nil
		} else {
			if err = validator.Validate(dst.RangeFilter); err != nil {
				dst.RangeFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangeFilter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EqualsFilter = nil
		dst.GeoFilter = nil
		dst.InFilter = nil
		dst.RangeFilter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AttrFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AttrFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AttrFilter) MarshalJSON() ([]byte, error) {
	if src.EqualsFilter != nil {
		return json.Marshal(&src.EqualsFilter)
	}

	if src.GeoFilter != nil {
		return json.Marshal(&src.GeoFilter)
	}

	if src.InFilter != nil {
		return json.Marshal(&src.InFilter)
	}

	if src.RangeFilter != nil {
		return json.Marshal(&src.RangeFilter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AttrFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EqualsFilter != nil {
		return obj.EqualsFilter
	}

	if obj.GeoFilter != nil {
		return obj.GeoFilter
	}

	if obj.InFilter != nil {
		return obj.InFilter
	}

	if obj.RangeFilter != nil {
		return obj.RangeFilter
	}

	// all schemas are nil
	return nil
}

type NullableAttrFilter struct {
	value *AttrFilter
	isSet bool
}

func (v NullableAttrFilter) Get() *AttrFilter {
	return v.value
}

func (v *NullableAttrFilter) Set(val *AttrFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAttrFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAttrFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttrFilter(val *AttrFilter) *NullableAttrFilter {
	return &NullableAttrFilter{value: val, isSet: true}
}

func (v NullableAttrFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttrFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


