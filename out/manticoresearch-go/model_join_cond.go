/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	_"bytes"
	_"fmt"
)

// checks if the JoinCond type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoinCond{}

// JoinCond Object representing the conditions used to perform the join operation
type JoinCond struct {
	// Field to join on
	Field string
	// Joined table
	Table string
	Type interface{}
}

type _JoinCond JoinCond

// NewJoinCond instantiates a new JoinCond object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinCond(field string, table string) *JoinCond {
	this := JoinCond{}
	this.Field = field
	this.Table = table
	return &this
}

// NewJoinCondWithDefaults instantiates a new JoinCond object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinCondWithDefaults() *JoinCond {
	this := JoinCond{}
	return &this
}

// GetField returns the Field field value
func (o *JoinCond) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *JoinCond) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *JoinCond) SetField(v string) {
	o.Field = v
}

// GetTable returns the Table field value
func (o *JoinCond) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *JoinCond) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *JoinCond) SetTable(v string) {
	o.Table = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JoinCond) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JoinCond) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JoinCond) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given interface{} and assigns it to the Type field.
func (o *JoinCond) SetType(v interface{}) {
	o.Type = v
}

func (o JoinCond) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoinCond) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["table"] = o.Table
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableJoinCond struct {
	value *JoinCond
	isSet bool
}

func (v NullableJoinCond) Get() *JoinCond {
	return v.value
}

func (v *NullableJoinCond) Set(val *JoinCond) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinCond) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinCond) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinCond(val *JoinCond) *NullableJoinCond {
	return &NullableJoinCond{value: val, isSet: true}
}

func (v NullableJoinCond) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinCond) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


