/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	_"bytes"
	_"fmt"
)

// checks if the Join type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Join{}

// Join struct for Join
type Join struct {
	// Type of the join operation
	Type string
	// List of objects defining joined tables
	On []JoinOn
	Query *FulltextFilter
	// Basic table of the join operation
	Table string
}

type _Join Join

// NewJoin instantiates a new Join object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoin(type_ string, on []JoinOn, table string) *Join {
	this := Join{}
	this.Type = type_
	this.On = on
	this.Table = table
	return &this
}

// NewJoinWithDefaults instantiates a new Join object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinWithDefaults() *Join {
	this := Join{}
	return &this
}

// GetType returns the Type field value
func (o *Join) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Join) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Join) SetType(v string) {
	o.Type = v
}

// GetOn returns the On field value
func (o *Join) GetOn() []JoinOn {
	if o == nil {
		var ret []JoinOn
		return ret
	}

	return o.On
}

// GetOnOk returns a tuple with the On field value
// and a boolean to check if the value has been set.
func (o *Join) GetOnOk() ([]JoinOn, bool) {
	if o == nil {
		return nil, false
	}
	return o.On, true
}

// SetOn sets field value
func (o *Join) SetOn(v []JoinOn) {
	o.On = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Join) GetQuery() FulltextFilter {
	if o == nil || IsNil(o.Query) {
		var ret FulltextFilter
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Join) GetQueryOk() (*FulltextFilter, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Join) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given FulltextFilter and assigns it to the Query field.
func (o *Join) SetQuery(v FulltextFilter) {
	o.Query = &v
}

// GetTable returns the Table field value
func (o *Join) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *Join) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *Join) SetTable(v string) {
	o.Table = v
}

func (o Join) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Join) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["on"] = o.On
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	toSerialize["table"] = o.Table
	return toSerialize, nil
}

type NullableJoin struct {
	value *Join
	isSet bool
}

func (v NullableJoin) Get() *Join {
	return v.value
}

func (v *NullableJoin) Set(val *Join) {
	v.value = val
	v.isSet = true
}

func (v NullableJoin) IsSet() bool {
	return v.isSet
}

func (v *NullableJoin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoin(val *Join) *NullableJoin {
	return &NullableJoin{value: val, isSet: true}
}

func (v NullableJoin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


