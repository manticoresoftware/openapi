/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// KnnQuery - struct for KnnQuery
type KnnQuery struct {
	ArrayOfFloat32 *[]float32
	String *string
}

// []float32AsKnnQuery is a convenience function that returns []float32 wrapped in KnnQuery
func ArrayOfFloat32AsKnnQuery(v *[]float32) KnnQuery {
	return KnnQuery{
		ArrayOfFloat32: v,
	}
}

// stringAsKnnQuery is a convenience function that returns string wrapped in KnnQuery
func StringAsKnnQuery(v *string) KnnQuery {
	return KnnQuery{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *KnnQuery) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFloat32)
	if err == nil {
		jsonArrayOfFloat32, _ := json.Marshal(dst.ArrayOfFloat32)
		if string(jsonArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfFloat32 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfFloat32); err != nil {
				dst.ArrayOfFloat32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfFloat32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfFloat32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(KnnQuery)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(KnnQuery)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src KnnQuery) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfFloat32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *KnnQuery) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfFloat32 != nil {
		return obj.ArrayOfFloat32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj KnnQuery) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfFloat32 != nil {
		return *obj.ArrayOfFloat32
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableKnnQuery struct {
	value *KnnQuery
	isSet bool
}

func (v NullableKnnQuery) Get() *KnnQuery {
	return v.value
}

func (v *NullableKnnQuery) Set(val *KnnQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableKnnQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableKnnQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnnQuery(val *KnnQuery) *NullableKnnQuery {
	return &NullableKnnQuery{value: val, isSet: true}
}

func (v NullableKnnQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnnQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

