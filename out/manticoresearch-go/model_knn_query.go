/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	_"bytes"
	_"fmt"
)

// checks if the KnnQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnnQuery{}

// KnnQuery Object representing a k-nearest neighbor search query
type KnnQuery struct {
	// Field to perform the k-nearest neighbor search on
	Field string
	// The number of nearest neighbors to return
	K int32
	// The vector used as input for the KNN search
	QueryVector []float32
	// The docuemnt ID used as input for the KNN search
	DocId *int64
	// Optional parameter controlling the accuracy of the search
	Ef *int32
	Filter *QueryFilter
}

type _KnnQuery KnnQuery

// NewKnnQuery instantiates a new KnnQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnnQuery(field string, k int32) *KnnQuery {
	this := KnnQuery{}
	this.Field = field
	this.K = k
	return &this
}

// NewKnnQueryWithDefaults instantiates a new KnnQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnnQueryWithDefaults() *KnnQuery {
	this := KnnQuery{}
	return &this
}

// GetField returns the Field field value
func (o *KnnQuery) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *KnnQuery) SetField(v string) {
	o.Field = v
}

// GetK returns the K field value
func (o *KnnQuery) GetK() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.K
}

// GetKOk returns a tuple with the K field value
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K, true
}

// SetK sets field value
func (o *KnnQuery) SetK(v int32) {
	o.K = v
}

// GetQueryVector returns the QueryVector field value if set, zero value otherwise.
func (o *KnnQuery) GetQueryVector() []float32 {
	if o == nil || IsNil(o.QueryVector) {
		var ret []float32
		return ret
	}
	return o.QueryVector
}

// GetQueryVectorOk returns a tuple with the QueryVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetQueryVectorOk() ([]float32, bool) {
	if o == nil || IsNil(o.QueryVector) {
		return nil, false
	}
	return o.QueryVector, true
}

// HasQueryVector returns a boolean if a field has been set.
func (o *KnnQuery) HasQueryVector() bool {
	if o != nil && !IsNil(o.QueryVector) {
		return true
	}

	return false
}

// SetQueryVector gets a reference to the given []float32 and assigns it to the QueryVector field.
func (o *KnnQuery) SetQueryVector(v []float32) {
	o.QueryVector = v
}

// GetDocId returns the DocId field value if set, zero value otherwise.
func (o *KnnQuery) GetDocId() int64 {
	if o == nil || IsNil(o.DocId) {
		var ret int64
		return ret
	}
	return *o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetDocIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DocId) {
		return nil, false
	}
	return o.DocId, true
}

// HasDocId returns a boolean if a field has been set.
func (o *KnnQuery) HasDocId() bool {
	if o != nil && !IsNil(o.DocId) {
		return true
	}

	return false
}

// SetDocId gets a reference to the given int64 and assigns it to the DocId field.
func (o *KnnQuery) SetDocId(v int64) {
	o.DocId = &v
}

// GetEf returns the Ef field value if set, zero value otherwise.
func (o *KnnQuery) GetEf() int32 {
	if o == nil || IsNil(o.Ef) {
		var ret int32
		return ret
	}
	return *o.Ef
}

// GetEfOk returns a tuple with the Ef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetEfOk() (*int32, bool) {
	if o == nil || IsNil(o.Ef) {
		return nil, false
	}
	return o.Ef, true
}

// HasEf returns a boolean if a field has been set.
func (o *KnnQuery) HasEf() bool {
	if o != nil && !IsNil(o.Ef) {
		return true
	}

	return false
}

// SetEf gets a reference to the given int32 and assigns it to the Ef field.
func (o *KnnQuery) SetEf(v int32) {
	o.Ef = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *KnnQuery) GetFilter() QueryFilter {
	if o == nil || IsNil(o.Filter) {
		var ret QueryFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnQuery) GetFilterOk() (*QueryFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *KnnQuery) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given QueryFilter and assigns it to the Filter field.
func (o *KnnQuery) SetFilter(v QueryFilter) {
	o.Filter = &v
}

func (o KnnQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnnQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["k"] = o.K
	if !IsNil(o.QueryVector) {
		toSerialize["query_vector"] = o.QueryVector
	}
	if !IsNil(o.DocId) {
		toSerialize["doc_id"] = o.DocId
	}
	if !IsNil(o.Ef) {
		toSerialize["ef"] = o.Ef
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

type NullableKnnQuery struct {
	value *KnnQuery
	isSet bool
}

func (v NullableKnnQuery) Get() *KnnQuery {
	return v.value
}

func (v *NullableKnnQuery) Set(val *KnnQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableKnnQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableKnnQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnnQuery(val *KnnQuery) *NullableKnnQuery {
	return &NullableKnnQuery{value: val, isSet: true}
}

func (v NullableKnnQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnnQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


