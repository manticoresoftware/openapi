/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HitsHits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HitsHits{}

// HitsHits Search hit representing a matched document
type HitsHits struct {
	// The ID of the matched document
	Id *int64 `json:"_id"` 
	// The score of the matched document
	Score *int32 `json:"_score"` 
	// The source data of the matched document
	Source map[string]interface{} `json:"_source"` 
}

// NewHitsHits instantiates a new HitsHits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHitsHits() *HitsHits {
	this := HitsHits{}
	return &this
}

// NewHitsHitsWithDefaults instantiates a new HitsHits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHitsHitsWithDefaults() *HitsHits {
	this := HitsHits{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HitsHits) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HitsHits) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *HitsHits) SetId(v int64) {
	o.Id = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *HitsHits) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *HitsHits) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *HitsHits) SetScore(v int32) {
	o.Score = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *HitsHits) GetSource() map[string]interface{} {
	if o == nil || IsNil(o.Source) {
		var ret map[string]interface{}
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Source) {
		return map[string]interface{}{}, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *HitsHits) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given map[string]interface{} and assigns it to the Source field.
func (o *HitsHits) SetSource(v map[string]interface{}) {
	o.Source = v
}

func (o HitsHits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HitsHits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Score) {
		toSerialize["_score"] = o.Score
	}
	if !IsNil(o.Source) {
		toSerialize["_source"] = o.Source
	}
	return toSerialize, nil
}

type NullableHitsHits struct {
	value *HitsHits
	isSet bool
}

func (v NullableHitsHits) Get() *HitsHits {
	return v.value
}

func (v *NullableHitsHits) Set(val *HitsHits) {
	v.value = val
	v.isSet = true
}

func (v NullableHitsHits) IsSet() bool {
	return v.isSet
}

func (v *NullableHitsHits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHitsHits(val *HitsHits) *NullableHitsHits {
	return &NullableHitsHits{value: val, isSet: true}
}

func (v NullableHitsHits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHitsHits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


