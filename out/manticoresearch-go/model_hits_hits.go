/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HitsHits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HitsHits{}

// HitsHits Search hit representing a matched document
type HitsHits struct {
	// The ID of the matched document
	Id *uint64 `json:"_id,omitempty"`
	// The score of the matched document
	Score *int32 `json:"_score,omitempty"`
	// The source data of the matched document
	Source map[string]interface{} `json:"_source,omitempty"`
	// The knn distance of the matched document returned for knn queries
	KnnDist *float32 `json:"_knn_dist,omitempty"`
	// The highlighting-related data of the matched document
	Highlight map[string]interface{} `json:"highlight,omitempty"`
	// The table name of the matched document returned for percolate queries
	Table *string `json:"table,omitempty"`
	// The type of the matched document returned for percolate queries
	Type *string `json:"_type:,omitempty"`
	// The percolate-related fields of the matched document returned for percolate queries
	Fields map[string]interface{} `json:"fields,omitempty"`
}

// NewHitsHits instantiates a new HitsHits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHitsHits() *HitsHits {
	this := HitsHits{}
	return &this
}

// NewHitsHitsWithDefaults instantiates a new HitsHits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHitsHitsWithDefaults() *HitsHits {
	this := HitsHits{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HitsHits) GetId() uint64 {
	if o == nil || IsNil(o.Id) {
		var ret uint64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetIdOk() (*uint64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HitsHits) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uint64 and assigns it to the Id field.
func (o *HitsHits) SetId(v uint64) {
	o.Id = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *HitsHits) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *HitsHits) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *HitsHits) SetScore(v int32) {
	o.Score = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *HitsHits) GetSource() map[string]interface{} {
	if o == nil || IsNil(o.Source) {
		var ret map[string]interface{}
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Source) {
		return map[string]interface{}{}, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *HitsHits) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given map[string]interface{} and assigns it to the Source field.
func (o *HitsHits) SetSource(v map[string]interface{}) {
	o.Source = v
}

// GetKnnDist returns the KnnDist field value if set, zero value otherwise.
func (o *HitsHits) GetKnnDist() float32 {
	if o == nil || IsNil(o.KnnDist) {
		var ret float32
		return ret
	}
	return *o.KnnDist
}

// GetKnnDistOk returns a tuple with the KnnDist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetKnnDistOk() (*float32, bool) {
	if o == nil || IsNil(o.KnnDist) {
		return nil, false
	}
	return o.KnnDist, true
}

// HasKnnDist returns a boolean if a field has been set.
func (o *HitsHits) HasKnnDist() bool {
	if o != nil && !IsNil(o.KnnDist) {
		return true
	}

	return false
}

// SetKnnDist gets a reference to the given float32 and assigns it to the KnnDist field.
func (o *HitsHits) SetKnnDist(v float32) {
	o.KnnDist = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *HitsHits) GetHighlight() map[string]interface{} {
	if o == nil || IsNil(o.Highlight) {
		var ret map[string]interface{}
		return ret
	}
	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetHighlightOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Highlight) {
		return map[string]interface{}{}, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *HitsHits) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string]interface{} and assigns it to the Highlight field.
func (o *HitsHits) SetHighlight(v map[string]interface{}) {
	o.Highlight = v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *HitsHits) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *HitsHits) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *HitsHits) SetTable(v string) {
	o.Table = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HitsHits) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HitsHits) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HitsHits) SetType(v string) {
	o.Type = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *HitsHits) GetFields() map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsHits) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *HitsHits) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *HitsHits) SetFields(v map[string]interface{}) {
	o.Fields = v
}

func (o HitsHits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HitsHits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Score) {
		toSerialize["_score"] = o.Score
	}
	if !IsNil(o.Source) {
		toSerialize["_source"] = o.Source
	}
	if !IsNil(o.KnnDist) {
		toSerialize["_knn_dist"] = o.KnnDist
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.Type) {
		toSerialize["_type:"] = o.Type
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableHitsHits struct {
	value *HitsHits
	isSet bool
}

func (v NullableHitsHits) Get() *HitsHits {
	return v.value
}

func (v *NullableHitsHits) Set(val *HitsHits) {
	v.value = val
	v.isSet = true
}

func (v NullableHitsHits) IsSet() bool {
	return v.isSet
}

func (v *NullableHitsHits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHitsHits(val *HitsHits) *NullableHitsHits {
	return &NullableHitsHits{value: val, isSet: true}
}

func (v NullableHitsHits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHitsHits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

