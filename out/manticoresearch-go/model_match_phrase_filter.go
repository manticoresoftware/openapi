/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchPhraseFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchPhraseFilter{}

// MatchPhraseFilter struct for MatchPhraseFilter
type MatchPhraseFilter struct {
	MatchPhrase map[string]string `json:"match_phrase,omitempty"`
}

// NewMatchPhraseFilter instantiates a new MatchPhraseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchPhraseFilter() *MatchPhraseFilter {
	this := MatchPhraseFilter{}
	return &this
}

// NewMatchPhraseFilterWithDefaults instantiates a new MatchPhraseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchPhraseFilterWithDefaults() *MatchPhraseFilter {
	this := MatchPhraseFilter{}
	return &this
}

// GetMatchPhrase returns the MatchPhrase field value if set, zero value otherwise.
func (o *MatchPhraseFilter) GetMatchPhrase() map[string]string {
	if o == nil || IsNil(o.MatchPhrase) {
		var ret map[string]string
		return ret
	}
	return o.MatchPhrase
}

// GetMatchPhraseOk returns a tuple with the MatchPhrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchPhraseFilter) GetMatchPhraseOk() (map[string]string, bool) {
	if o == nil || IsNil(o.MatchPhrase) {
		return map[string]string{}, false
	}
	return o.MatchPhrase, true
}

// HasMatchPhrase returns a boolean if a field has been set.
func (o *MatchPhraseFilter) HasMatchPhrase() bool {
	if o != nil && !IsNil(o.MatchPhrase) {
		return true
	}

	return false
}

// SetMatchPhrase gets a reference to the given map[string]string and assigns it to the MatchPhrase field.
func (o *MatchPhraseFilter) SetMatchPhrase(v map[string]string) {
	o.MatchPhrase = v
}

func (o MatchPhraseFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchPhraseFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchPhrase) {
		toSerialize["match_phrase"] = o.MatchPhrase
	}
	return toSerialize, nil
}

type NullableMatchPhraseFilter struct {
	value *MatchPhraseFilter
	isSet bool
}

func (v NullableMatchPhraseFilter) Get() *MatchPhraseFilter {
	return v.value
}

func (v *NullableMatchPhraseFilter) Set(val *MatchPhraseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchPhraseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchPhraseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchPhraseFilter(val *MatchPhraseFilter) *NullableMatchPhraseFilter {
	return &NullableMatchPhraseFilter{value: val, isSet: true}
}

func (v NullableMatchPhraseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchPhraseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


