/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BoolFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoolFilter{}

// BoolFilter struct for BoolFilter
type BoolFilter struct {
	// Query clauses that must match for the document to be included
	Must []QueryFilter
	// Query clauses that must not match for the document to be included
	MustNot []*QueryFilter
	// Query clauses that should be matched, but are not required
	Should []*QueryFilter
}

// NewBoolFilter instantiates a new BoolFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoolFilter() *BoolFilter {
	this := BoolFilter{}
	return &this
}

// NewBoolFilterWithDefaults instantiates a new BoolFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoolFilterWithDefaults() *BoolFilter {
	this := BoolFilter{}
	return &this
}

// GetMust returns the Must field value if set, zero value otherwise.
func (o *BoolFilter) GetMust() []QueryFilter {
	if o == nil || IsNil(o.Must) {
		var ret []QueryFilter
		return ret
	}
	return o.Must
}

// GetMustOk returns a tuple with the Must field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoolFilter) GetMustOk() ([]QueryFilter, bool) {
	if o == nil || IsNil(o.Must) {
		return nil, false
	}
	return o.Must, true
}

// HasMust returns a boolean if a field has been set.
func (o *BoolFilter) HasMust() bool {
	if o != nil && !IsNil(o.Must) {
		return true
	}

	return false
}

// SetMust gets a reference to the given []QueryFilter and assigns it to the Must field.
func (o *BoolFilter) SetMust(v []QueryFilter) {
	o.Must = v
}

// GetMustNot returns the MustNot field value if set, zero value otherwise.
func (o *BoolFilter) GetMustNot() []*QueryFilter {
	if o == nil || IsNil(o.MustNot) {
		var ret []*QueryFilter
		return ret
	}
	return o.MustNot
}

// GetMustNotOk returns a tuple with the MustNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoolFilter) GetMustNotOk() ([]*QueryFilter, bool) {
	if o == nil || IsNil(o.MustNot) {
		return nil, false
	}
	return o.MustNot, true
}

// HasMustNot returns a boolean if a field has been set.
func (o *BoolFilter) HasMustNot() bool {
	if o != nil && !IsNil(o.MustNot) {
		return true
	}

	return false
}

// SetMustNot gets a reference to the given []*QueryFilter and assigns it to the MustNot field.
func (o *BoolFilter) SetMustNot(v []*QueryFilter) {
	o.MustNot = v
}

// GetShould returns the Should field value if set, zero value otherwise.
func (o *BoolFilter) GetShould() []*QueryFilter {
	if o == nil || IsNil(o.Should) {
		var ret []*QueryFilter
		return ret
	}
	return o.Should
}

// GetShouldOk returns a tuple with the Should field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoolFilter) GetShouldOk() ([]*QueryFilter, bool) {
	if o == nil || IsNil(o.Should) {
		return nil, false
	}
	return o.Should, true
}

// HasShould returns a boolean if a field has been set.
func (o *BoolFilter) HasShould() bool {
	if o != nil && !IsNil(o.Should) {
		return true
	}

	return false
}

// SetShould gets a reference to the given []*QueryFilter and assigns it to the Should field.
func (o *BoolFilter) SetShould(v []*QueryFilter) {
	o.Should = v
}

func (o BoolFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoolFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Must) {
		toSerialize["must"] = o.Must
	}
	if !IsNil(o.MustNot) {
		toSerialize["must_not"] = o.MustNot
	}
	if !IsNil(o.Should) {
		toSerialize["should"] = o.Should
	}
	return toSerialize, nil
}

type NullableBoolFilter struct {
	value *BoolFilter
	isSet bool
}

func (v NullableBoolFilter) Get() *BoolFilter {
	return v.value
}

func (v *NullableBoolFilter) Set(val *BoolFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBoolFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBoolFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoolFilter(val *BoolFilter) *NullableBoolFilter {
	return &NullableBoolFilter{value: val, isSet: true}
}

func (v NullableBoolFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoolFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


