/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BasicSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicSearchRequest{}

// BasicSearchRequest Request object for search operation
type BasicSearchRequest struct {
	Aggs *Aggregation `json:"aggs,omitempty"`
	Expressions map[string]string `json:"expressions,omitempty"`
	Join []JoinInner `json:"join,omitempty"`
	Highlight *Highlight `json:"highlight,omitempty"`
	Index string `json:"index"`
	Limit *int32 `json:"limit,omitempty"`
	MaxMatches *int32 `json:"max_matches,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	Options map[string]interface{} `json:"options,omitempty"`
	Profile *bool `json:"profile,omitempty"`
	Sort []SearchRequestParametersSortInner `json:"sort,omitempty"`
	Source *SearchRequestParametersSource `json:"_source,omitempty"`
	TrackScores *bool `json:"track_scores,omitempty"`
	Query QueryFilter `json:"query"`
}

type _BasicSearchRequest BasicSearchRequest

// NewBasicSearchRequest instantiates a new BasicSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicSearchRequest(index string, query QueryFilter) *BasicSearchRequest {
	this := BasicSearchRequest{}
	this.Index = index
	this.Query = query
	return &this
}

// NewBasicSearchRequestWithDefaults instantiates a new BasicSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicSearchRequestWithDefaults() *BasicSearchRequest {
	this := BasicSearchRequest{}
	return &this
}

// GetAggs returns the Aggs field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetAggs() Aggregation {
	if o == nil || IsNil(o.Aggs) {
		var ret Aggregation
		return ret
	}
	return *o.Aggs
}

// GetAggsOk returns a tuple with the Aggs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetAggsOk() (*Aggregation, bool) {
	if o == nil || IsNil(o.Aggs) {
		return nil, false
	}
	return o.Aggs, true
}

// HasAggs returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasAggs() bool {
	if o != nil && !IsNil(o.Aggs) {
		return true
	}

	return false
}

// SetAggs gets a reference to the given Aggregation and assigns it to the Aggs field.
func (o *BasicSearchRequest) SetAggs(v Aggregation) {
	o.Aggs = &v
}

// GetExpressions returns the Expressions field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetExpressions() map[string]string {
	if o == nil || IsNil(o.Expressions) {
		var ret map[string]string
		return ret
	}
	return o.Expressions
}

// GetExpressionsOk returns a tuple with the Expressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetExpressionsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Expressions) {
		return map[string]string{}, false
	}
	return o.Expressions, true
}

// HasExpressions returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasExpressions() bool {
	if o != nil && !IsNil(o.Expressions) {
		return true
	}

	return false
}

// SetExpressions gets a reference to the given map[string]string and assigns it to the Expressions field.
func (o *BasicSearchRequest) SetExpressions(v map[string]string) {
	o.Expressions = v
}

// GetJoin returns the Join field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetJoin() []JoinInner {
	if o == nil || IsNil(o.Join) {
		var ret []JoinInner
		return ret
	}
	return o.Join
}

// GetJoinOk returns a tuple with the Join field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetJoinOk() ([]JoinInner, bool) {
	if o == nil || IsNil(o.Join) {
		return nil, false
	}
	return o.Join, true
}

// HasJoin returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasJoin() bool {
	if o != nil && !IsNil(o.Join) {
		return true
	}

	return false
}

// SetJoin gets a reference to the given []JoinInner and assigns it to the Join field.
func (o *BasicSearchRequest) SetJoin(v []JoinInner) {
	o.Join = v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetHighlight() Highlight {
	if o == nil || IsNil(o.Highlight) {
		var ret Highlight
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetHighlightOk() (*Highlight, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given Highlight and assigns it to the Highlight field.
func (o *BasicSearchRequest) SetHighlight(v Highlight) {
	o.Highlight = &v
}

// GetIndex returns the Index field value
func (o *BasicSearchRequest) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *BasicSearchRequest) SetIndex(v string) {
	o.Index = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *BasicSearchRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetMaxMatches returns the MaxMatches field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetMaxMatches() int32 {
	if o == nil || IsNil(o.MaxMatches) {
		var ret int32
		return ret
	}
	return *o.MaxMatches
}

// GetMaxMatchesOk returns a tuple with the MaxMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetMaxMatchesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMatches) {
		return nil, false
	}
	return o.MaxMatches, true
}

// HasMaxMatches returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasMaxMatches() bool {
	if o != nil && !IsNil(o.MaxMatches) {
		return true
	}

	return false
}

// SetMaxMatches gets a reference to the given int32 and assigns it to the MaxMatches field.
func (o *BasicSearchRequest) SetMaxMatches(v int32) {
	o.MaxMatches = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *BasicSearchRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *BasicSearchRequest) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetProfile() bool {
	if o == nil || IsNil(o.Profile) {
		var ret bool
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given bool and assigns it to the Profile field.
func (o *BasicSearchRequest) SetProfile(v bool) {
	o.Profile = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetSort() []SearchRequestParametersSortInner {
	if o == nil || IsNil(o.Sort) {
		var ret []SearchRequestParametersSortInner
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetSortOk() ([]SearchRequestParametersSortInner, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []SearchRequestParametersSortInner and assigns it to the Sort field.
func (o *BasicSearchRequest) SetSort(v []SearchRequestParametersSortInner) {
	o.Sort = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetSource() SearchRequestParametersSource {
	if o == nil || IsNil(o.Source) {
		var ret SearchRequestParametersSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetSourceOk() (*SearchRequestParametersSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given SearchRequestParametersSource and assigns it to the Source field.
func (o *BasicSearchRequest) SetSource(v SearchRequestParametersSource) {
	o.Source = &v
}

// GetTrackScores returns the TrackScores field value if set, zero value otherwise.
func (o *BasicSearchRequest) GetTrackScores() bool {
	if o == nil || IsNil(o.TrackScores) {
		var ret bool
		return ret
	}
	return *o.TrackScores
}

// GetTrackScoresOk returns a tuple with the TrackScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetTrackScoresOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackScores) {
		return nil, false
	}
	return o.TrackScores, true
}

// HasTrackScores returns a boolean if a field has been set.
func (o *BasicSearchRequest) HasTrackScores() bool {
	if o != nil && !IsNil(o.TrackScores) {
		return true
	}

	return false
}

// SetTrackScores gets a reference to the given bool and assigns it to the TrackScores field.
func (o *BasicSearchRequest) SetTrackScores(v bool) {
	o.TrackScores = &v
}

// GetQuery returns the Query field value
func (o *BasicSearchRequest) GetQuery() QueryFilter {
	if o == nil {
		var ret QueryFilter
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *BasicSearchRequest) GetQueryOk() (*QueryFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *BasicSearchRequest) SetQuery(v QueryFilter) {
	o.Query = v
}

func (o BasicSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggs) {
		toSerialize["aggs"] = o.Aggs
	}
	if !IsNil(o.Expressions) {
		toSerialize["expressions"] = o.Expressions
	}
	if !IsNil(o.Join) {
		toSerialize["join"] = o.Join
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	toSerialize["index"] = o.Index
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.MaxMatches) {
		toSerialize["max_matches"] = o.MaxMatches
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Source) {
		toSerialize["_source"] = o.Source
	}
	if !IsNil(o.TrackScores) {
		toSerialize["track_scores"] = o.TrackScores
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

func (o *BasicSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBasicSearchRequest := _BasicSearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBasicSearchRequest)

	if err != nil {
		return err
	}

	*o = BasicSearchRequest(varBasicSearchRequest)

	return err
}

type NullableBasicSearchRequest struct {
	value *BasicSearchRequest
	isSet bool
}

func (v NullableBasicSearchRequest) Get() *BasicSearchRequest {
	return v.value
}

func (v *NullableBasicSearchRequest) Set(val *BasicSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicSearchRequest(val *BasicSearchRequest) *NullableBasicSearchRequest {
	return &NullableBasicSearchRequest{value: val, isSet: true}
}

func (v NullableBasicSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


