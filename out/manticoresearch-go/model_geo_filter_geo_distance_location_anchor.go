/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GeoFilterGeoDistanceLocationAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoFilterGeoDistanceLocationAnchor{}

// GeoFilterGeoDistanceLocationAnchor struct for GeoFilterGeoDistanceLocationAnchor
type GeoFilterGeoDistanceLocationAnchor struct {
	Lat *float32 `json:"lat,omitempty"`
	Lon *float32 `json:"lon,omitempty"`
}

// NewGeoFilterGeoDistanceLocationAnchor instantiates a new GeoFilterGeoDistanceLocationAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoFilterGeoDistanceLocationAnchor() *GeoFilterGeoDistanceLocationAnchor {
	this := GeoFilterGeoDistanceLocationAnchor{}
	return &this
}

// NewGeoFilterGeoDistanceLocationAnchorWithDefaults instantiates a new GeoFilterGeoDistanceLocationAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoFilterGeoDistanceLocationAnchorWithDefaults() *GeoFilterGeoDistanceLocationAnchor {
	this := GeoFilterGeoDistanceLocationAnchor{}
	return &this
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *GeoFilterGeoDistanceLocationAnchor) GetLat() float32 {
	if o == nil || IsNil(o.Lat) {
		var ret float32
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistanceLocationAnchor) GetLatOk() (*float32, bool) {
	if o == nil || IsNil(o.Lat) {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *GeoFilterGeoDistanceLocationAnchor) HasLat() bool {
	if o != nil && !IsNil(o.Lat) {
		return true
	}

	return false
}

// SetLat gets a reference to the given float32 and assigns it to the Lat field.
func (o *GeoFilterGeoDistanceLocationAnchor) SetLat(v float32) {
	o.Lat = &v
}

// GetLon returns the Lon field value if set, zero value otherwise.
func (o *GeoFilterGeoDistanceLocationAnchor) GetLon() float32 {
	if o == nil || IsNil(o.Lon) {
		var ret float32
		return ret
	}
	return *o.Lon
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistanceLocationAnchor) GetLonOk() (*float32, bool) {
	if o == nil || IsNil(o.Lon) {
		return nil, false
	}
	return o.Lon, true
}

// HasLon returns a boolean if a field has been set.
func (o *GeoFilterGeoDistanceLocationAnchor) HasLon() bool {
	if o != nil && !IsNil(o.Lon) {
		return true
	}

	return false
}

// SetLon gets a reference to the given float32 and assigns it to the Lon field.
func (o *GeoFilterGeoDistanceLocationAnchor) SetLon(v float32) {
	o.Lon = &v
}

func (o GeoFilterGeoDistanceLocationAnchor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoFilterGeoDistanceLocationAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lat) {
		toSerialize["lat"] = o.Lat
	}
	if !IsNil(o.Lon) {
		toSerialize["lon"] = o.Lon
	}
	return toSerialize, nil
}

type NullableGeoFilterGeoDistanceLocationAnchor struct {
	value *GeoFilterGeoDistanceLocationAnchor
	isSet bool
}

func (v NullableGeoFilterGeoDistanceLocationAnchor) Get() *GeoFilterGeoDistanceLocationAnchor {
	return v.value
}

func (v *NullableGeoFilterGeoDistanceLocationAnchor) Set(val *GeoFilterGeoDistanceLocationAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoFilterGeoDistanceLocationAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoFilterGeoDistanceLocationAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoFilterGeoDistanceLocationAnchor(val *GeoFilterGeoDistanceLocationAnchor) *NullableGeoFilterGeoDistanceLocationAnchor {
	return &NullableGeoFilterGeoDistanceLocationAnchor{value: val, isSet: true}
}

func (v NullableGeoFilterGeoDistanceLocationAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoFilterGeoDistanceLocationAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


