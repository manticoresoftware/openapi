/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InFilter{}

// InFilter struct for InFilter
type InFilter struct {
	In map[string][]EqualsFilterEquals `json:"in,omitempty"`
}

// NewInFilter instantiates a new InFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInFilter() *InFilter {
	this := InFilter{}
	return &this
}

// NewInFilterWithDefaults instantiates a new InFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInFilterWithDefaults() *InFilter {
	this := InFilter{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *InFilter) GetIn() map[string][]EqualsFilterEquals {
	if o == nil || IsNil(o.In) {
		var ret map[string][]EqualsFilterEquals
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InFilter) GetInOk() (map[string][]EqualsFilterEquals, bool) {
	if o == nil || IsNil(o.In) {
		return map[string][]EqualsFilterEquals{}, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *InFilter) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given map[string][]EqualsFilterEquals and assigns it to the In field.
func (o *InFilter) SetIn(v map[string][]EqualsFilterEquals) {
	o.In = v
}

func (o InFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	return toSerialize, nil
}

type NullableInFilter struct {
	value *InFilter
	isSet bool
}

func (v NullableInFilter) Get() *InFilter {
	return v.value
}

func (v *NullableInFilter) Set(val *InFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableInFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableInFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInFilter(val *InFilter) *NullableInFilter {
	return &NullableInFilter{value: val, isSet: true}
}

func (v NullableInFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


