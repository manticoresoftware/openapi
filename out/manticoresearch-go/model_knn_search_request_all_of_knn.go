/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// KnnSearchRequestAllOfKnn - struct for KnnSearchRequestAllOfKnn
type KnnSearchRequestAllOfKnn struct {
	KnnDocIdRequest *KnnDocIdRequest
	KnnQueryVectorRequest *KnnQueryVectorRequest
}

// KnnDocIdRequestAsKnnSearchRequestAllOfKnn is a convenience function that returns KnnDocIdRequest wrapped in KnnSearchRequestAllOfKnn
func KnnDocIdRequestAsKnnSearchRequestAllOfKnn(v *KnnDocIdRequest) KnnSearchRequestAllOfKnn {
	return KnnSearchRequestAllOfKnn{
		KnnDocIdRequest: v,
	}
}

// KnnQueryVectorRequestAsKnnSearchRequestAllOfKnn is a convenience function that returns KnnQueryVectorRequest wrapped in KnnSearchRequestAllOfKnn
func KnnQueryVectorRequestAsKnnSearchRequestAllOfKnn(v *KnnQueryVectorRequest) KnnSearchRequestAllOfKnn {
	return KnnSearchRequestAllOfKnn{
		KnnQueryVectorRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *KnnSearchRequestAllOfKnn) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into KnnDocIdRequest
	err = newStrictDecoder(data).Decode(&dst.KnnDocIdRequest)
	if err == nil {
		jsonKnnDocIdRequest, _ := json.Marshal(dst.KnnDocIdRequest)
		if string(jsonKnnDocIdRequest) == "{}" { // empty struct
			dst.KnnDocIdRequest = nil
		} else {
			if err = validator.Validate(dst.KnnDocIdRequest); err != nil {
				dst.KnnDocIdRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.KnnDocIdRequest = nil
	}

	// try to unmarshal data into KnnQueryVectorRequest
	err = newStrictDecoder(data).Decode(&dst.KnnQueryVectorRequest)
	if err == nil {
		jsonKnnQueryVectorRequest, _ := json.Marshal(dst.KnnQueryVectorRequest)
		if string(jsonKnnQueryVectorRequest) == "{}" { // empty struct
			dst.KnnQueryVectorRequest = nil
		} else {
			if err = validator.Validate(dst.KnnQueryVectorRequest); err != nil {
				dst.KnnQueryVectorRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.KnnQueryVectorRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.KnnDocIdRequest = nil
		dst.KnnQueryVectorRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(KnnSearchRequestAllOfKnn)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(KnnSearchRequestAllOfKnn)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src KnnSearchRequestAllOfKnn) MarshalJSON() ([]byte, error) {
	if src.KnnDocIdRequest != nil {
		return json.Marshal(&src.KnnDocIdRequest)
	}

	if src.KnnQueryVectorRequest != nil {
		return json.Marshal(&src.KnnQueryVectorRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *KnnSearchRequestAllOfKnn) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.KnnDocIdRequest != nil {
		return obj.KnnDocIdRequest
	}

	if obj.KnnQueryVectorRequest != nil {
		return obj.KnnQueryVectorRequest
	}

	// all schemas are nil
	return nil
}

type NullableKnnSearchRequestAllOfKnn struct {
	value *KnnSearchRequestAllOfKnn
	isSet bool
}

func (v NullableKnnSearchRequestAllOfKnn) Get() *KnnSearchRequestAllOfKnn {
	return v.value
}

func (v *NullableKnnSearchRequestAllOfKnn) Set(val *KnnSearchRequestAllOfKnn) {
	v.value = val
	v.isSet = true
}

func (v NullableKnnSearchRequestAllOfKnn) IsSet() bool {
	return v.isSet
}

func (v *NullableKnnSearchRequestAllOfKnn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnnSearchRequestAllOfKnn(val *KnnSearchRequestAllOfKnn) *NullableKnnSearchRequestAllOfKnn {
	return &NullableKnnSearchRequestAllOfKnn{value: val, isSet: true}
}

func (v NullableKnnSearchRequestAllOfKnn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnnSearchRequestAllOfKnn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


