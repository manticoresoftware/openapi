/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponseErrorOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseErrorOneOf{}

// ErrorResponseErrorOneOf Detailed error information from error response
type ErrorResponseErrorOneOf struct {
	Type string `json:"type"`
	Reason NullableString `json:"reason,omitempty"`
	Index NullableString `json:"index,omitempty"`
}

type _ErrorResponseErrorOneOf ErrorResponseErrorOneOf

// NewErrorResponseErrorOneOf instantiates a new ErrorResponseErrorOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseErrorOneOf(type_ string) *ErrorResponseErrorOneOf {
	this := ErrorResponseErrorOneOf{}
	this.Type = type_
	return &this
}

// NewErrorResponseErrorOneOfWithDefaults instantiates a new ErrorResponseErrorOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseErrorOneOfWithDefaults() *ErrorResponseErrorOneOf {
	this := ErrorResponseErrorOneOf{}
	return &this
}

// GetType returns the Type field value
func (o *ErrorResponseErrorOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrorOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ErrorResponseErrorOneOf) SetType(v string) {
	o.Type = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorResponseErrorOneOf) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorResponseErrorOneOf) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *ErrorResponseErrorOneOf) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *ErrorResponseErrorOneOf) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *ErrorResponseErrorOneOf) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *ErrorResponseErrorOneOf) UnsetReason() {
	o.Reason.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorResponseErrorOneOf) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorResponseErrorOneOf) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *ErrorResponseErrorOneOf) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *ErrorResponseErrorOneOf) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *ErrorResponseErrorOneOf) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *ErrorResponseErrorOneOf) UnsetIndex() {
	o.Index.Unset()
}

func (o ErrorResponseErrorOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseErrorOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	return toSerialize, nil
}

func (o *ErrorResponseErrorOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseErrorOneOf := _ErrorResponseErrorOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponseErrorOneOf)

	if err != nil {
		return err
	}

	*o = ErrorResponseErrorOneOf(varErrorResponseErrorOneOf)

	return err
}

type NullableErrorResponseErrorOneOf struct {
	value *ErrorResponseErrorOneOf
	isSet bool
}

func (v NullableErrorResponseErrorOneOf) Get() *ErrorResponseErrorOneOf {
	return v.value
}

func (v *NullableErrorResponseErrorOneOf) Set(val *ErrorResponseErrorOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseErrorOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseErrorOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseErrorOneOf(val *ErrorResponseErrorOneOf) *NullableErrorResponseErrorOneOf {
	return &NullableErrorResponseErrorOneOf{value: val, isSet: true}
}

func (v NullableErrorResponseErrorOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseErrorOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


