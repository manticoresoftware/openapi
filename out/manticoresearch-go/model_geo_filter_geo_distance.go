/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GeoFilterGeoDistance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoFilterGeoDistance{}

// GeoFilterGeoDistance struct for GeoFilterGeoDistance
type GeoFilterGeoDistance struct {
	LocationAnchor *GeoFilterGeoDistanceLocationAnchor `json:"location_anchor,omitempty"`
	LocationSource *string `json:"location_source,omitempty"`
	DistanceType *string `json:"distance_type,omitempty"`
	Distance *string `json:"distance,omitempty" validate:"regexp=^\\\\.+(km|m|cm|mm|mi|yd|ft|in|NM|nmi|kilometers|meters|centimeters|millimeters|miles|yards|foots|inches|nauticalmiles|)$"`
}

// NewGeoFilterGeoDistance instantiates a new GeoFilterGeoDistance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoFilterGeoDistance() *GeoFilterGeoDistance {
	this := GeoFilterGeoDistance{}
	return &this
}

// NewGeoFilterGeoDistanceWithDefaults instantiates a new GeoFilterGeoDistance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoFilterGeoDistanceWithDefaults() *GeoFilterGeoDistance {
	this := GeoFilterGeoDistance{}
	return &this
}

// GetLocationAnchor returns the LocationAnchor field value if set, zero value otherwise.
func (o *GeoFilterGeoDistance) GetLocationAnchor() GeoFilterGeoDistanceLocationAnchor {
	if o == nil || IsNil(o.LocationAnchor) {
		var ret GeoFilterGeoDistanceLocationAnchor
		return ret
	}
	return *o.LocationAnchor
}

// GetLocationAnchorOk returns a tuple with the LocationAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistance) GetLocationAnchorOk() (*GeoFilterGeoDistanceLocationAnchor, bool) {
	if o == nil || IsNil(o.LocationAnchor) {
		return nil, false
	}
	return o.LocationAnchor, true
}

// HasLocationAnchor returns a boolean if a field has been set.
func (o *GeoFilterGeoDistance) HasLocationAnchor() bool {
	if o != nil && !IsNil(o.LocationAnchor) {
		return true
	}

	return false
}

// SetLocationAnchor gets a reference to the given GeoFilterGeoDistanceLocationAnchor and assigns it to the LocationAnchor field.
func (o *GeoFilterGeoDistance) SetLocationAnchor(v GeoFilterGeoDistanceLocationAnchor) {
	o.LocationAnchor = &v
}

// GetLocationSource returns the LocationSource field value if set, zero value otherwise.
func (o *GeoFilterGeoDistance) GetLocationSource() string {
	if o == nil || IsNil(o.LocationSource) {
		var ret string
		return ret
	}
	return *o.LocationSource
}

// GetLocationSourceOk returns a tuple with the LocationSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistance) GetLocationSourceOk() (*string, bool) {
	if o == nil || IsNil(o.LocationSource) {
		return nil, false
	}
	return o.LocationSource, true
}

// HasLocationSource returns a boolean if a field has been set.
func (o *GeoFilterGeoDistance) HasLocationSource() bool {
	if o != nil && !IsNil(o.LocationSource) {
		return true
	}

	return false
}

// SetLocationSource gets a reference to the given string and assigns it to the LocationSource field.
func (o *GeoFilterGeoDistance) SetLocationSource(v string) {
	o.LocationSource = &v
}

// GetDistanceType returns the DistanceType field value if set, zero value otherwise.
func (o *GeoFilterGeoDistance) GetDistanceType() string {
	if o == nil || IsNil(o.DistanceType) {
		var ret string
		return ret
	}
	return *o.DistanceType
}

// GetDistanceTypeOk returns a tuple with the DistanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistance) GetDistanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DistanceType) {
		return nil, false
	}
	return o.DistanceType, true
}

// HasDistanceType returns a boolean if a field has been set.
func (o *GeoFilterGeoDistance) HasDistanceType() bool {
	if o != nil && !IsNil(o.DistanceType) {
		return true
	}

	return false
}

// SetDistanceType gets a reference to the given string and assigns it to the DistanceType field.
func (o *GeoFilterGeoDistance) SetDistanceType(v string) {
	o.DistanceType = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *GeoFilterGeoDistance) GetDistance() string {
	if o == nil || IsNil(o.Distance) {
		var ret string
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFilterGeoDistance) GetDistanceOk() (*string, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *GeoFilterGeoDistance) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given string and assigns it to the Distance field.
func (o *GeoFilterGeoDistance) SetDistance(v string) {
	o.Distance = &v
}

func (o GeoFilterGeoDistance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoFilterGeoDistance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationAnchor) {
		toSerialize["location_anchor"] = o.LocationAnchor
	}
	if !IsNil(o.LocationSource) {
		toSerialize["location_source"] = o.LocationSource
	}
	if !IsNil(o.DistanceType) {
		toSerialize["distance_type"] = o.DistanceType
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	return toSerialize, nil
}

type NullableGeoFilterGeoDistance struct {
	value *GeoFilterGeoDistance
	isSet bool
}

func (v NullableGeoFilterGeoDistance) Get() *GeoFilterGeoDistance {
	return v.value
}

func (v *NullableGeoFilterGeoDistance) Set(val *GeoFilterGeoDistance) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoFilterGeoDistance) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoFilterGeoDistance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoFilterGeoDistance(val *GeoFilterGeoDistance) *NullableGeoFilterGeoDistance {
	return &NullableGeoFilterGeoDistance{value: val, isSet: true}
}

func (v NullableGeoFilterGeoDistance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoFilterGeoDistance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


