/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KnnDocIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnnDocIdRequest{}

// KnnDocIdRequest struct for KnnDocIdRequest
type KnnDocIdRequest struct {
	Field string `json:"field"`
	K *int32 `json:"k,omitempty"`
	Ef *int32 `json:"ef,omitempty"`
	DocId int64 `json:"doc_id"`
}

type _KnnDocIdRequest KnnDocIdRequest

// NewKnnDocIdRequest instantiates a new KnnDocIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnnDocIdRequest(field string, docId int64) *KnnDocIdRequest {
	this := KnnDocIdRequest{}
	this.Field = field
	this.DocId = docId
	return &this
}

// NewKnnDocIdRequestWithDefaults instantiates a new KnnDocIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnnDocIdRequestWithDefaults() *KnnDocIdRequest {
	this := KnnDocIdRequest{}
	return &this
}

// GetField returns the Field field value
func (o *KnnDocIdRequest) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *KnnDocIdRequest) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *KnnDocIdRequest) SetField(v string) {
	o.Field = v
}

// GetK returns the K field value if set, zero value otherwise.
func (o *KnnDocIdRequest) GetK() int32 {
	if o == nil || IsNil(o.K) {
		var ret int32
		return ret
	}
	return *o.K
}

// GetKOk returns a tuple with the K field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnDocIdRequest) GetKOk() (*int32, bool) {
	if o == nil || IsNil(o.K) {
		return nil, false
	}
	return o.K, true
}

// HasK returns a boolean if a field has been set.
func (o *KnnDocIdRequest) HasK() bool {
	if o != nil && !IsNil(o.K) {
		return true
	}

	return false
}

// SetK gets a reference to the given int32 and assigns it to the K field.
func (o *KnnDocIdRequest) SetK(v int32) {
	o.K = &v
}

// GetEf returns the Ef field value if set, zero value otherwise.
func (o *KnnDocIdRequest) GetEf() int32 {
	if o == nil || IsNil(o.Ef) {
		var ret int32
		return ret
	}
	return *o.Ef
}

// GetEfOk returns a tuple with the Ef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnDocIdRequest) GetEfOk() (*int32, bool) {
	if o == nil || IsNil(o.Ef) {
		return nil, false
	}
	return o.Ef, true
}

// HasEf returns a boolean if a field has been set.
func (o *KnnDocIdRequest) HasEf() bool {
	if o != nil && !IsNil(o.Ef) {
		return true
	}

	return false
}

// SetEf gets a reference to the given int32 and assigns it to the Ef field.
func (o *KnnDocIdRequest) SetEf(v int32) {
	o.Ef = &v
}

// GetDocId returns the DocId field value
func (o *KnnDocIdRequest) GetDocId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value
// and a boolean to check if the value has been set.
func (o *KnnDocIdRequest) GetDocIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocId, true
}

// SetDocId sets field value
func (o *KnnDocIdRequest) SetDocId(v int64) {
	o.DocId = v
}

func (o KnnDocIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnnDocIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	if !IsNil(o.K) {
		toSerialize["k"] = o.K
	}
	if !IsNil(o.Ef) {
		toSerialize["ef"] = o.Ef
	}
	toSerialize["doc_id"] = o.DocId
	return toSerialize, nil
}

func (o *KnnDocIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"doc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKnnDocIdRequest := _KnnDocIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKnnDocIdRequest)

	if err != nil {
		return err
	}

	*o = KnnDocIdRequest(varKnnDocIdRequest)

	return err
}

type NullableKnnDocIdRequest struct {
	value *KnnDocIdRequest
	isSet bool
}

func (v NullableKnnDocIdRequest) Get() *KnnDocIdRequest {
	return v.value
}

func (v *NullableKnnDocIdRequest) Set(val *KnnDocIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKnnDocIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKnnDocIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnnDocIdRequest(val *KnnDocIdRequest) *NullableKnnDocIdRequest {
	return &NullableKnnDocIdRequest{value: val, isSet: true}
}

func (v NullableKnnDocIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnnDocIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


