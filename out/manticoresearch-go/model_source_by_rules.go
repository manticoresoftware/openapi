/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 5.0.0
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceByRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceByRules{}

// SourceByRules Query fields to be included/excluded to/from response
type SourceByRules struct {
	Includes []string `json:"includes,omitempty"`
	Excludes []string `json:"excludes,omitempty"`
}

// NewSourceByRules instantiates a new SourceByRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceByRules() *SourceByRules {
	this := SourceByRules{}
	return &this
}

// NewSourceByRulesWithDefaults instantiates a new SourceByRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceByRulesWithDefaults() *SourceByRules {
	this := SourceByRules{}
	return &this
}

// GetIncludes returns the Includes field value if set, zero value otherwise.
func (o *SourceByRules) GetIncludes() []string {
	if o == nil || IsNil(o.Includes) {
		var ret []string
		return ret
	}
	return o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceByRules) GetIncludesOk() ([]string, bool) {
	if o == nil || IsNil(o.Includes) {
		return nil, false
	}
	return o.Includes, true
}

// HasIncludes returns a boolean if a field has been set.
func (o *SourceByRules) HasIncludes() bool {
	if o != nil && !IsNil(o.Includes) {
		return true
	}

	return false
}

// SetIncludes gets a reference to the given []string and assigns it to the Includes field.
func (o *SourceByRules) SetIncludes(v []string) {
	o.Includes = v
}

// GetExcludes returns the Excludes field value if set, zero value otherwise.
func (o *SourceByRules) GetExcludes() []string {
	if o == nil || IsNil(o.Excludes) {
		var ret []string
		return ret
	}
	return o.Excludes
}

// GetExcludesOk returns a tuple with the Excludes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceByRules) GetExcludesOk() ([]string, bool) {
	if o == nil || IsNil(o.Excludes) {
		return nil, false
	}
	return o.Excludes, true
}

// HasExcludes returns a boolean if a field has been set.
func (o *SourceByRules) HasExcludes() bool {
	if o != nil && !IsNil(o.Excludes) {
		return true
	}

	return false
}

// SetExcludes gets a reference to the given []string and assigns it to the Excludes field.
func (o *SourceByRules) SetExcludes(v []string) {
	o.Excludes = v
}

func (o SourceByRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceByRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Includes) {
		toSerialize["includes"] = o.Includes
	}
	if !IsNil(o.Excludes) {
		toSerialize["excludes"] = o.Excludes
	}
	return toSerialize, nil
}

type NullableSourceByRules struct {
	value *SourceByRules
	isSet bool
}

func (v NullableSourceByRules) Get() *SourceByRules {
	return v.value
}

func (v *NullableSourceByRules) Set(val *SourceByRules) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceByRules) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceByRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceByRules(val *SourceByRules) *NullableSourceByRules {
	return &NullableSourceByRules{value: val, isSet: true}
}

func (v NullableSourceByRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceByRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


