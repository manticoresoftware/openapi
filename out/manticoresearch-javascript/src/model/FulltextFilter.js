/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchAllFilter from './MatchAllFilter';
import MatchFilter from './MatchFilter';
import MatchFilterMatch from './MatchFilterMatch';
import MatchPhraseFilter from './MatchPhraseFilter';
import QueryStringFilter from './QueryStringFilter';

/**
 * The FulltextFilter model module.
 * @module model/FulltextFilter
 * @version 4.0.0
 */
class FulltextFilter {
    /**
     * Constructs a new <code>FulltextFilter</code>.
     * @alias module:model/FulltextFilter
     * @param {(module:model/MatchAllFilter|module:model/MatchFilter|module:model/MatchPhraseFilter|module:model/QueryStringFilter)} instance The actual instance to initialize FulltextFilter.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "MatchFilter") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MatchFilter.validateJSON(instance); // throw an exception if no match
                // create MatchFilter from JS object
                this.actualInstance = MatchFilter.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MatchFilter
            errorMessages.push("Failed to construct MatchFilter: " + err)
        }

        try {
            if (typeof instance === "MatchAllFilter") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MatchAllFilter.validateJSON(instance); // throw an exception if no match
                // create MatchAllFilter from JS object
                this.actualInstance = MatchAllFilter.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MatchAllFilter
            errorMessages.push("Failed to construct MatchAllFilter: " + err)
        }

        try {
            if (typeof instance === "MatchPhraseFilter") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MatchPhraseFilter.validateJSON(instance); // throw an exception if no match
                // create MatchPhraseFilter from JS object
                this.actualInstance = MatchPhraseFilter.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MatchPhraseFilter
            errorMessages.push("Failed to construct MatchPhraseFilter: " + err)
        }

        try {
            if (typeof instance === "QueryStringFilter") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                QueryStringFilter.validateJSON(instance); // throw an exception if no match
                // create QueryStringFilter from JS object
                this.actualInstance = QueryStringFilter.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into QueryStringFilter
            errorMessages.push("Failed to construct QueryStringFilter: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `FulltextFilter` with oneOf schemas MatchAllFilter, MatchFilter, MatchPhraseFilter, QueryStringFilter. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `FulltextFilter` with oneOf schemas MatchAllFilter, MatchFilter, MatchPhraseFilter, QueryStringFilter. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>FulltextFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FulltextFilter} obj Optional instance to populate.
     * @return {module:model/FulltextFilter} The populated <code>FulltextFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        return new FulltextFilter(data);
    }

    /**
     * Gets the actual instance, which can be <code>MatchAllFilter</code>, <code>MatchFilter</code>, <code>MatchPhraseFilter</code>, <code>QueryStringFilter</code>.
     * @return {(module:model/MatchAllFilter|module:model/MatchFilter|module:model/MatchPhraseFilter|module:model/QueryStringFilter)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MatchAllFilter</code>, <code>MatchFilter</code>, <code>MatchPhraseFilter</code>, <code>QueryStringFilter</code>.
     * @param {(module:model/MatchAllFilter|module:model/MatchFilter|module:model/MatchPhraseFilter|module:model/QueryStringFilter)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = FulltextFilter.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of FulltextFilter from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/FulltextFilter} An instance of FulltextFilter.
     */
    static fromJSON = function(json_string){
        return FulltextFilter.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/MatchFilterMatch} match
 */
FulltextFilter.prototype['match'] = undefined;

/**
 * @member {module:model/FulltextFilter.MatchAllEnum} match_all
 */
FulltextFilter.prototype['match_all'] = undefined;

/**
 * @member {Object.<String, String>} match_phrase
 */
FulltextFilter.prototype['match_phrase'] = undefined;

/**
 * @member {String} query_string
 */
FulltextFilter.prototype['query_string'] = undefined;


FulltextFilter.OneOf = ["MatchAllFilter", "MatchFilter", "MatchPhraseFilter", "QueryStringFilter"];

export default FulltextFilter;

