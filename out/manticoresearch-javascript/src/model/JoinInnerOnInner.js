/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JoinBasicCond from './JoinBasicCond';
import JoinInnerOnInnerLeft from './JoinInnerOnInnerLeft';

/**
 * The JoinInnerOnInner model module.
 * @module model/JoinInnerOnInner
 * @version 4.0.0
 */
class JoinInnerOnInner {
    /**
     * Constructs a new <code>JoinInnerOnInner</code>.
     * @alias module:model/JoinInnerOnInner
     */
    constructor() { 
        
        JoinInnerOnInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JoinInnerOnInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JoinInnerOnInner} obj Optional instance to populate.
     * @return {module:model/JoinInnerOnInner} The populated <code>JoinInnerOnInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JoinInnerOnInner();

            if (data.hasOwnProperty('left')) {
                obj['left'] = JoinInnerOnInnerLeft.constructFromObject(data['left']);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = JoinBasicCond.constructFromObject(data['right']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JoinInnerOnInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JoinInnerOnInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `left`
        if (data['left']) { // data not null
          JoinInnerOnInnerLeft.validateJSON(data['left']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // validate the optional field `right`
        if (data['right']) { // data not null
          JoinBasicCond.validateJSON(data['right']);
        }

        return true;
    }


}



/**
 * @member {module:model/JoinInnerOnInnerLeft} left
 */
JoinInnerOnInner.prototype['left'] = undefined;

/**
 * @member {module:model/JoinInnerOnInner.OperatorEnum} operator
 */
JoinInnerOnInner.prototype['operator'] = undefined;

/**
 * @member {module:model/JoinBasicCond} right
 */
JoinInnerOnInner.prototype['right'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
JoinInnerOnInner['OperatorEnum'] = {

    /**
     * value: "eq"
     * @const
     */
    "eq": "eq"
};



export default JoinInnerOnInner;

