/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GeoDistance : Object to perform geo-distance based filtering on queries
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GeoDistance {
    #[serde(rename = "location_anchor", skip_serializing_if = "Option::is_none")]
    pub location_anchor: Option<Box<crate::models::GeoDistanceLocationAnchor>>,
    /// Field name in the document that contains location data
    #[serde(rename = "location_source", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub location_source: Option<Option<serde_json::Value>>,
    /// Algorithm used to calculate the distance
    #[serde(rename = "distance_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub distance_type: Option<Option<DistanceType>>,
    /// The distance from the anchor point to filter results by
    #[serde(rename = "distance", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub distance: Option<Option<serde_json::Value>>,
}

impl GeoDistance {
    /// Object to perform geo-distance based filtering on queries
    pub fn new() -> GeoDistance {
        GeoDistance {
            location_anchor: None,
            location_source: None,
            distance_type: None,
            distance: None,
        }
    }
}
/// Algorithm used to calculate the distance
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DistanceType {
    #[serde(rename = "adaptive")]
    Adaptive,
    #[serde(rename = "haversine")]
    Haversine,
}

impl Default for DistanceType {
    fn default() -> DistanceType {
        Self::Adaptive
    }
}

