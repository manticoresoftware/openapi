/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Range : Filter helper object defining the 'range' condition
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Range {
    #[serde(rename = "lt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lt: Option<Option<serde_json::Value>>,
    #[serde(rename = "lte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lte: Option<Option<serde_json::Value>>,
    #[serde(rename = "gt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gt: Option<Option<serde_json::Value>>,
    #[serde(rename = "gte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gte: Option<Option<serde_json::Value>>,
}

impl Range {
    /// Filter helper object defining the 'range' condition
    pub fn new() -> Range {
        Range {
            lt: None,
            lte: None,
            gt: None,
            gte: None,
        }
    }
}

