/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchPhraseFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchPhraseFilter{}

// MatchPhraseFilter Query match expression
type MatchPhraseFilter struct {
	QueryPhrase string `json:"query_phrase"`
	QueryFields string `json:"query_fields"`
}

type _MatchPhraseFilter MatchPhraseFilter

// NewMatchPhraseFilter instantiates a new MatchPhraseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchPhraseFilter(queryPhrase string, queryFields string) *MatchPhraseFilter {
	this := MatchPhraseFilter{}
	this.QueryPhrase = queryPhrase
	this.QueryFields = queryFields
	return &this
}

// NewMatchPhraseFilterWithDefaults instantiates a new MatchPhraseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchPhraseFilterWithDefaults() *MatchPhraseFilter {
	this := MatchPhraseFilter{}
	return &this
}

// GetQueryPhrase returns the QueryPhrase field value
func (o *MatchPhraseFilter) GetQueryPhrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryPhrase
}

// GetQueryPhraseOk returns a tuple with the QueryPhrase field value
// and a boolean to check if the value has been set.
func (o *MatchPhraseFilter) GetQueryPhraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryPhrase, true
}

// SetQueryPhrase sets field value
func (o *MatchPhraseFilter) SetQueryPhrase(v string) {
	o.QueryPhrase = v
}

// GetQueryFields returns the QueryFields field value
func (o *MatchPhraseFilter) GetQueryFields() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryFields
}

// GetQueryFieldsOk returns a tuple with the QueryFields field value
// and a boolean to check if the value has been set.
func (o *MatchPhraseFilter) GetQueryFieldsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryFields, true
}

// SetQueryFields sets field value
func (o *MatchPhraseFilter) SetQueryFields(v string) {
	o.QueryFields = v
}

func (o MatchPhraseFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchPhraseFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query_phrase"] = o.QueryPhrase
	toSerialize["query_fields"] = o.QueryFields
	return toSerialize, nil
}

func (o *MatchPhraseFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query_phrase",
		"query_fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchPhraseFilter := _MatchPhraseFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchPhraseFilter)

	if err != nil {
		return err
	}

	*o = MatchPhraseFilter(varMatchPhraseFilter)

	return err
}

type NullableMatchPhraseFilter struct {
	value *MatchPhraseFilter
	isSet bool
}

func (v NullableMatchPhraseFilter) Get() *MatchPhraseFilter {
	return v.value
}

func (v *NullableMatchPhraseFilter) Set(val *MatchPhraseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchPhraseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchPhraseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchPhraseFilter(val *MatchPhraseFilter) *NullableMatchPhraseFilter {
	return &NullableMatchPhraseFilter{value: val, isSet: true}
}

func (v NullableMatchPhraseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchPhraseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


