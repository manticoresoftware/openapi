/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// SqlDefaultResponse - struct for SqlDefaultResponse
type SqlDefaultResponse struct {
	ErrorResponse *ErrorResponse
	ErrorResponseString *ErrorResponseString
}

// ErrorResponseAsSqlDefaultResponse is a convenience function that returns ErrorResponse wrapped in SqlDefaultResponse
func ErrorResponseAsSqlDefaultResponse(v *ErrorResponse) SqlDefaultResponse {
	return SqlDefaultResponse{
		ErrorResponse: v,
	}
}

// ErrorResponseStringAsSqlDefaultResponse is a convenience function that returns ErrorResponseString wrapped in SqlDefaultResponse
func ErrorResponseStringAsSqlDefaultResponse(v *ErrorResponseString) SqlDefaultResponse {
	return SqlDefaultResponse{
		ErrorResponseString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SqlDefaultResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorResponse)
	if err == nil {
		jsonErrorResponse, _ := json.Marshal(dst.ErrorResponse)
		if string(jsonErrorResponse) == "{}" { // empty struct
			dst.ErrorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ErrorResponse = nil
	}

	// try to unmarshal data into ErrorResponseString
	err = newStrictDecoder(data).Decode(&dst.ErrorResponseString)
	if err == nil {
		jsonErrorResponseString, _ := json.Marshal(dst.ErrorResponseString)
		if string(jsonErrorResponseString) == "{}" { // empty struct
			dst.ErrorResponseString = nil
		} else {
			match++
		}
	} else {
		dst.ErrorResponseString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorResponse = nil
		dst.ErrorResponseString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SqlDefaultResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SqlDefaultResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SqlDefaultResponse) MarshalJSON() ([]byte, error) {
	if src.ErrorResponse != nil {
		return json.Marshal(&src.ErrorResponse)
	}

	if src.ErrorResponseString != nil {
		return json.Marshal(&src.ErrorResponseString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SqlDefaultResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorResponse != nil {
		return obj.ErrorResponse
	}

	if obj.ErrorResponseString != nil {
		return obj.ErrorResponseString
	}

	// all schemas are nil
	return nil
}

type NullableSqlDefaultResponse struct {
	value *SqlDefaultResponse
	isSet bool
}

func (v NullableSqlDefaultResponse) Get() *SqlDefaultResponse {
	return v.value
}

func (v *NullableSqlDefaultResponse) Set(val *SqlDefaultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlDefaultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlDefaultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlDefaultResponse(val *SqlDefaultResponse) *NullableSqlDefaultResponse {
	return &NullableSqlDefaultResponse{value: val, isSet: true}
}

func (v NullableSqlDefaultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlDefaultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


