/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KnnSearchRequestByDocId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnnSearchRequestByDocId{}

// KnnSearchRequestByDocId Request object for knn search operation
type KnnSearchRequestByDocId struct {
	Index string `json:"index"`
	Field string `json:"field"`
	DocId int32 `json:"doc_id"`
	K int32 `json:"k"`
	FulltextFilter map[string]interface{} `json:"fulltext_filter,omitempty"`
	AttrFilter map[string]interface{} `json:"attr_filter,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	MaxMatches *int32 `json:"max_matches,omitempty"`
	Sort []map[string]interface{} `json:"sort,omitempty"`
	Aggs *map[string]Aggregation `json:"aggs,omitempty"`
	Expressions *map[string]string `json:"expressions,omitempty"`
	Highlight *Highlight `json:"highlight,omitempty"`
	Source map[string]interface{} `json:"source,omitempty"`
	Options map[string]interface{} `json:"options,omitempty"`
	Profile *bool `json:"profile,omitempty"`
	TrackScores *bool `json:"track_scores,omitempty"`
}

type _KnnSearchRequestByDocId KnnSearchRequestByDocId

// NewKnnSearchRequestByDocId instantiates a new KnnSearchRequestByDocId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnnSearchRequestByDocId(index string, field string, docId int32, k int32) *KnnSearchRequestByDocId {
	this := KnnSearchRequestByDocId{}
	this.Index = index
	this.Field = field
	this.DocId = docId
	this.K = k
	return &this
}

// NewKnnSearchRequestByDocIdWithDefaults instantiates a new KnnSearchRequestByDocId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnnSearchRequestByDocIdWithDefaults() *KnnSearchRequestByDocId {
	this := KnnSearchRequestByDocId{}
	var index string = ""
	this.Index = index
	var field string = ""
	this.Field = field
	return &this
}

// GetIndex returns the Index field value
func (o *KnnSearchRequestByDocId) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *KnnSearchRequestByDocId) SetIndex(v string) {
	o.Index = v
}

// GetField returns the Field field value
func (o *KnnSearchRequestByDocId) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *KnnSearchRequestByDocId) SetField(v string) {
	o.Field = v
}

// GetDocId returns the DocId field value
func (o *KnnSearchRequestByDocId) GetDocId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetDocIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocId, true
}

// SetDocId sets field value
func (o *KnnSearchRequestByDocId) SetDocId(v int32) {
	o.DocId = v
}

// GetK returns the K field value
func (o *KnnSearchRequestByDocId) GetK() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.K
}

// GetKOk returns a tuple with the K field value
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K, true
}

// SetK sets field value
func (o *KnnSearchRequestByDocId) SetK(v int32) {
	o.K = v
}

// GetFulltextFilter returns the FulltextFilter field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetFulltextFilter() map[string]interface{} {
	if o == nil || IsNil(o.FulltextFilter) {
		var ret map[string]interface{}
		return ret
	}
	return o.FulltextFilter
}

// GetFulltextFilterOk returns a tuple with the FulltextFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetFulltextFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FulltextFilter) {
		return map[string]interface{}{}, false
	}
	return o.FulltextFilter, true
}

// HasFulltextFilter returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasFulltextFilter() bool {
	if o != nil && !IsNil(o.FulltextFilter) {
		return true
	}

	return false
}

// SetFulltextFilter gets a reference to the given map[string]interface{} and assigns it to the FulltextFilter field.
func (o *KnnSearchRequestByDocId) SetFulltextFilter(v map[string]interface{}) {
	o.FulltextFilter = v
}

// GetAttrFilter returns the AttrFilter field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetAttrFilter() map[string]interface{} {
	if o == nil || IsNil(o.AttrFilter) {
		var ret map[string]interface{}
		return ret
	}
	return o.AttrFilter
}

// GetAttrFilterOk returns a tuple with the AttrFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetAttrFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AttrFilter) {
		return map[string]interface{}{}, false
	}
	return o.AttrFilter, true
}

// HasAttrFilter returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasAttrFilter() bool {
	if o != nil && !IsNil(o.AttrFilter) {
		return true
	}

	return false
}

// SetAttrFilter gets a reference to the given map[string]interface{} and assigns it to the AttrFilter field.
func (o *KnnSearchRequestByDocId) SetAttrFilter(v map[string]interface{}) {
	o.AttrFilter = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *KnnSearchRequestByDocId) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *KnnSearchRequestByDocId) SetOffset(v int32) {
	o.Offset = &v
}

// GetMaxMatches returns the MaxMatches field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetMaxMatches() int32 {
	if o == nil || IsNil(o.MaxMatches) {
		var ret int32
		return ret
	}
	return *o.MaxMatches
}

// GetMaxMatchesOk returns a tuple with the MaxMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetMaxMatchesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMatches) {
		return nil, false
	}
	return o.MaxMatches, true
}

// HasMaxMatches returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasMaxMatches() bool {
	if o != nil && !IsNil(o.MaxMatches) {
		return true
	}

	return false
}

// SetMaxMatches gets a reference to the given int32 and assigns it to the MaxMatches field.
func (o *KnnSearchRequestByDocId) SetMaxMatches(v int32) {
	o.MaxMatches = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetSort() []map[string]interface{} {
	if o == nil || IsNil(o.Sort) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetSortOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []map[string]interface{} and assigns it to the Sort field.
func (o *KnnSearchRequestByDocId) SetSort(v []map[string]interface{}) {
	o.Sort = v
}

// GetAggs returns the Aggs field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetAggs() map[string]Aggregation {
	if o == nil || IsNil(o.Aggs) {
		var ret map[string]Aggregation
		return ret
	}
	return *o.Aggs
}

// GetAggsOk returns a tuple with the Aggs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetAggsOk() (*map[string]Aggregation, bool) {
	if o == nil || IsNil(o.Aggs) {
		return nil, false
	}
	return o.Aggs, true
}

// HasAggs returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasAggs() bool {
	if o != nil && !IsNil(o.Aggs) {
		return true
	}

	return false
}

// SetAggs gets a reference to the given map[string]Aggregation and assigns it to the Aggs field.
func (o *KnnSearchRequestByDocId) SetAggs(v map[string]Aggregation) {
	o.Aggs = &v
}

// GetExpressions returns the Expressions field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetExpressions() map[string]string {
	if o == nil || IsNil(o.Expressions) {
		var ret map[string]string
		return ret
	}
	return *o.Expressions
}

// GetExpressionsOk returns a tuple with the Expressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetExpressionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Expressions) {
		return nil, false
	}
	return o.Expressions, true
}

// HasExpressions returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasExpressions() bool {
	if o != nil && !IsNil(o.Expressions) {
		return true
	}

	return false
}

// SetExpressions gets a reference to the given map[string]string and assigns it to the Expressions field.
func (o *KnnSearchRequestByDocId) SetExpressions(v map[string]string) {
	o.Expressions = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetHighlight() Highlight {
	if o == nil || IsNil(o.Highlight) {
		var ret Highlight
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetHighlightOk() (*Highlight, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given Highlight and assigns it to the Highlight field.
func (o *KnnSearchRequestByDocId) SetHighlight(v Highlight) {
	o.Highlight = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetSource() map[string]interface{} {
	if o == nil || IsNil(o.Source) {
		var ret map[string]interface{}
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Source) {
		return map[string]interface{}{}, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given map[string]interface{} and assigns it to the Source field.
func (o *KnnSearchRequestByDocId) SetSource(v map[string]interface{}) {
	o.Source = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *KnnSearchRequestByDocId) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetProfile() bool {
	if o == nil || IsNil(o.Profile) {
		var ret bool
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given bool and assigns it to the Profile field.
func (o *KnnSearchRequestByDocId) SetProfile(v bool) {
	o.Profile = &v
}

// GetTrackScores returns the TrackScores field value if set, zero value otherwise.
func (o *KnnSearchRequestByDocId) GetTrackScores() bool {
	if o == nil || IsNil(o.TrackScores) {
		var ret bool
		return ret
	}
	return *o.TrackScores
}

// GetTrackScoresOk returns a tuple with the TrackScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnnSearchRequestByDocId) GetTrackScoresOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackScores) {
		return nil, false
	}
	return o.TrackScores, true
}

// HasTrackScores returns a boolean if a field has been set.
func (o *KnnSearchRequestByDocId) HasTrackScores() bool {
	if o != nil && !IsNil(o.TrackScores) {
		return true
	}

	return false
}

// SetTrackScores gets a reference to the given bool and assigns it to the TrackScores field.
func (o *KnnSearchRequestByDocId) SetTrackScores(v bool) {
	o.TrackScores = &v
}

func (o KnnSearchRequestByDocId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnnSearchRequestByDocId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	toSerialize["field"] = o.Field
	toSerialize["doc_id"] = o.DocId
	toSerialize["k"] = o.K
	if !IsNil(o.FulltextFilter) {
		toSerialize["fulltext_filter"] = o.FulltextFilter
	}
	if !IsNil(o.AttrFilter) {
		toSerialize["attr_filter"] = o.AttrFilter
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.MaxMatches) {
		toSerialize["max_matches"] = o.MaxMatches
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Aggs) {
		toSerialize["aggs"] = o.Aggs
	}
	if !IsNil(o.Expressions) {
		toSerialize["expressions"] = o.Expressions
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.TrackScores) {
		toSerialize["track_scores"] = o.TrackScores
	}
	return toSerialize, nil
}

func (o *KnnSearchRequestByDocId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"field",
		"doc_id",
		"k",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKnnSearchRequestByDocId := _KnnSearchRequestByDocId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKnnSearchRequestByDocId)

	if err != nil {
		return err
	}

	*o = KnnSearchRequestByDocId(varKnnSearchRequestByDocId)

	return err
}

type NullableKnnSearchRequestByDocId struct {
	value *KnnSearchRequestByDocId
	isSet bool
}

func (v NullableKnnSearchRequestByDocId) Get() *KnnSearchRequestByDocId {
	return v.value
}

func (v *NullableKnnSearchRequestByDocId) Set(val *KnnSearchRequestByDocId) {
	v.value = val
	v.isSet = true
}

func (v NullableKnnSearchRequestByDocId) IsSet() bool {
	return v.isSet
}

func (v *NullableKnnSearchRequestByDocId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnnSearchRequestByDocId(val *KnnSearchRequestByDocId) *NullableKnnSearchRequestByDocId {
	return &NullableKnnSearchRequestByDocId{value: val, isSet: true}
}

func (v NullableKnnSearchRequestByDocId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnnSearchRequestByDocId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


