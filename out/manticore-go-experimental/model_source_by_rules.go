/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceByRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceByRules{}

// SourceByRules Query fields to be included/excluded to/from response
type SourceByRules struct {
	Includes []string `json:"includes"`
	Excludes []string `json:"excludes"`
}

type _SourceByRules SourceByRules

// NewSourceByRules instantiates a new SourceByRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceByRules(includes []string, excludes []string) *SourceByRules {
	this := SourceByRules{}
	this.Includes = includes
	this.Excludes = excludes
	return &this
}

// NewSourceByRulesWithDefaults instantiates a new SourceByRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceByRulesWithDefaults() *SourceByRules {
	this := SourceByRules{}
	return &this
}

// GetIncludes returns the Includes field value
func (o *SourceByRules) GetIncludes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value
// and a boolean to check if the value has been set.
func (o *SourceByRules) GetIncludesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Includes, true
}

// SetIncludes sets field value
func (o *SourceByRules) SetIncludes(v []string) {
	o.Includes = v
}

// GetExcludes returns the Excludes field value
func (o *SourceByRules) GetExcludes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Excludes
}

// GetExcludesOk returns a tuple with the Excludes field value
// and a boolean to check if the value has been set.
func (o *SourceByRules) GetExcludesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Excludes, true
}

// SetExcludes sets field value
func (o *SourceByRules) SetExcludes(v []string) {
	o.Excludes = v
}

func (o SourceByRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceByRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["includes"] = o.Includes
	toSerialize["excludes"] = o.Excludes
	return toSerialize, nil
}

func (o *SourceByRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includes",
		"excludes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceByRules := _SourceByRules{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceByRules)

	if err != nil {
		return err
	}

	*o = SourceByRules(varSourceByRules)

	return err
}

type NullableSourceByRules struct {
	value *SourceByRules
	isSet bool
}

func (v NullableSourceByRules) Get() *SourceByRules {
	return v.value
}

func (v *NullableSourceByRules) Set(val *SourceByRules) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceByRules) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceByRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceByRules(val *SourceByRules) *NullableSourceByRules {
	return &NullableSourceByRules{value: val, isSet: true}
}

func (v NullableSourceByRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceByRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


