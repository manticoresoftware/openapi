/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AggregationCompositeSourcesInnerValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationCompositeSourcesInnerValue{}

// AggregationCompositeSourcesInnerValue struct for AggregationCompositeSourcesInnerValue
type AggregationCompositeSourcesInnerValue struct {
	Terms *AggregationCompositeSourcesInnerValueTerms `json:"terms,omitempty"`
}

// NewAggregationCompositeSourcesInnerValue instantiates a new AggregationCompositeSourcesInnerValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationCompositeSourcesInnerValue() *AggregationCompositeSourcesInnerValue {
	this := AggregationCompositeSourcesInnerValue{}
	return &this
}

// NewAggregationCompositeSourcesInnerValueWithDefaults instantiates a new AggregationCompositeSourcesInnerValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationCompositeSourcesInnerValueWithDefaults() *AggregationCompositeSourcesInnerValue {
	this := AggregationCompositeSourcesInnerValue{}
	return &this
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *AggregationCompositeSourcesInnerValue) GetTerms() AggregationCompositeSourcesInnerValueTerms {
	if o == nil || IsNil(o.Terms) {
		var ret AggregationCompositeSourcesInnerValueTerms
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationCompositeSourcesInnerValue) GetTermsOk() (*AggregationCompositeSourcesInnerValueTerms, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *AggregationCompositeSourcesInnerValue) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given AggregationCompositeSourcesInnerValueTerms and assigns it to the Terms field.
func (o *AggregationCompositeSourcesInnerValue) SetTerms(v AggregationCompositeSourcesInnerValueTerms) {
	o.Terms = &v
}

func (o AggregationCompositeSourcesInnerValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationCompositeSourcesInnerValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	return toSerialize, nil
}

type NullableAggregationCompositeSourcesInnerValue struct {
	value *AggregationCompositeSourcesInnerValue
	isSet bool
}

func (v NullableAggregationCompositeSourcesInnerValue) Get() *AggregationCompositeSourcesInnerValue {
	return v.value
}

func (v *NullableAggregationCompositeSourcesInnerValue) Set(val *AggregationCompositeSourcesInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationCompositeSourcesInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationCompositeSourcesInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationCompositeSourcesInnerValue(val *AggregationCompositeSourcesInnerValue) *NullableAggregationCompositeSourcesInnerValue {
	return &NullableAggregationCompositeSourcesInnerValue{value: val, isSet: true}
}

func (v NullableAggregationCompositeSourcesInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationCompositeSourcesInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


