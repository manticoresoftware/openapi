/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AggregationCompositeSourcesInnerValueTerms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationCompositeSourcesInnerValueTerms{}

// AggregationCompositeSourcesInnerValueTerms struct for AggregationCompositeSourcesInnerValueTerms
type AggregationCompositeSourcesInnerValueTerms struct {
	// Name of attribute to aggregate by
	Field *string `json:"field,omitempty"`
}

// NewAggregationCompositeSourcesInnerValueTerms instantiates a new AggregationCompositeSourcesInnerValueTerms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationCompositeSourcesInnerValueTerms() *AggregationCompositeSourcesInnerValueTerms {
	this := AggregationCompositeSourcesInnerValueTerms{}
	return &this
}

// NewAggregationCompositeSourcesInnerValueTermsWithDefaults instantiates a new AggregationCompositeSourcesInnerValueTerms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationCompositeSourcesInnerValueTermsWithDefaults() *AggregationCompositeSourcesInnerValueTerms {
	this := AggregationCompositeSourcesInnerValueTerms{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *AggregationCompositeSourcesInnerValueTerms) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationCompositeSourcesInnerValueTerms) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *AggregationCompositeSourcesInnerValueTerms) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *AggregationCompositeSourcesInnerValueTerms) SetField(v string) {
	o.Field = &v
}

func (o AggregationCompositeSourcesInnerValueTerms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationCompositeSourcesInnerValueTerms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableAggregationCompositeSourcesInnerValueTerms struct {
	value *AggregationCompositeSourcesInnerValueTerms
	isSet bool
}

func (v NullableAggregationCompositeSourcesInnerValueTerms) Get() *AggregationCompositeSourcesInnerValueTerms {
	return v.value
}

func (v *NullableAggregationCompositeSourcesInnerValueTerms) Set(val *AggregationCompositeSourcesInnerValueTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationCompositeSourcesInnerValueTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationCompositeSourcesInnerValueTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationCompositeSourcesInnerValueTerms(val *AggregationCompositeSourcesInnerValueTerms) *NullableAggregationCompositeSourcesInnerValueTerms {
	return &NullableAggregationCompositeSourcesInnerValueTerms{value: val, isSet: true}
}

func (v NullableAggregationCompositeSourcesInnerValueTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationCompositeSourcesInnerValueTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


