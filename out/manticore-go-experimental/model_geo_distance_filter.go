/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GeoDistanceFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoDistanceFilter{}

// GeoDistanceFilter Geo distance attribute filter
type GeoDistanceFilter struct {
	LocationAnchor *GeoDistanceFilterLocationAnchor `json:"location_anchor,omitempty"`
	// Attribute containing latitude and longitude data
	LocationSource *string `json:"location_source,omitempty"`
	DistanceType *string `json:"distance_type,omitempty"`
	Distance *string `json:"distance,omitempty"`
}

// NewGeoDistanceFilter instantiates a new GeoDistanceFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoDistanceFilter() *GeoDistanceFilter {
	this := GeoDistanceFilter{}
	return &this
}

// NewGeoDistanceFilterWithDefaults instantiates a new GeoDistanceFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoDistanceFilterWithDefaults() *GeoDistanceFilter {
	this := GeoDistanceFilter{}
	return &this
}

// GetLocationAnchor returns the LocationAnchor field value if set, zero value otherwise.
func (o *GeoDistanceFilter) GetLocationAnchor() GeoDistanceFilterLocationAnchor {
	if o == nil || IsNil(o.LocationAnchor) {
		var ret GeoDistanceFilterLocationAnchor
		return ret
	}
	return *o.LocationAnchor
}

// GetLocationAnchorOk returns a tuple with the LocationAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoDistanceFilter) GetLocationAnchorOk() (*GeoDistanceFilterLocationAnchor, bool) {
	if o == nil || IsNil(o.LocationAnchor) {
		return nil, false
	}
	return o.LocationAnchor, true
}

// HasLocationAnchor returns a boolean if a field has been set.
func (o *GeoDistanceFilter) HasLocationAnchor() bool {
	if o != nil && !IsNil(o.LocationAnchor) {
		return true
	}

	return false
}

// SetLocationAnchor gets a reference to the given GeoDistanceFilterLocationAnchor and assigns it to the LocationAnchor field.
func (o *GeoDistanceFilter) SetLocationAnchor(v GeoDistanceFilterLocationAnchor) {
	o.LocationAnchor = &v
}

// GetLocationSource returns the LocationSource field value if set, zero value otherwise.
func (o *GeoDistanceFilter) GetLocationSource() string {
	if o == nil || IsNil(o.LocationSource) {
		var ret string
		return ret
	}
	return *o.LocationSource
}

// GetLocationSourceOk returns a tuple with the LocationSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoDistanceFilter) GetLocationSourceOk() (*string, bool) {
	if o == nil || IsNil(o.LocationSource) {
		return nil, false
	}
	return o.LocationSource, true
}

// HasLocationSource returns a boolean if a field has been set.
func (o *GeoDistanceFilter) HasLocationSource() bool {
	if o != nil && !IsNil(o.LocationSource) {
		return true
	}

	return false
}

// SetLocationSource gets a reference to the given string and assigns it to the LocationSource field.
func (o *GeoDistanceFilter) SetLocationSource(v string) {
	o.LocationSource = &v
}

// GetDistanceType returns the DistanceType field value if set, zero value otherwise.
func (o *GeoDistanceFilter) GetDistanceType() string {
	if o == nil || IsNil(o.DistanceType) {
		var ret string
		return ret
	}
	return *o.DistanceType
}

// GetDistanceTypeOk returns a tuple with the DistanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoDistanceFilter) GetDistanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DistanceType) {
		return nil, false
	}
	return o.DistanceType, true
}

// HasDistanceType returns a boolean if a field has been set.
func (o *GeoDistanceFilter) HasDistanceType() bool {
	if o != nil && !IsNil(o.DistanceType) {
		return true
	}

	return false
}

// SetDistanceType gets a reference to the given string and assigns it to the DistanceType field.
func (o *GeoDistanceFilter) SetDistanceType(v string) {
	o.DistanceType = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *GeoDistanceFilter) GetDistance() string {
	if o == nil || IsNil(o.Distance) {
		var ret string
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoDistanceFilter) GetDistanceOk() (*string, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *GeoDistanceFilter) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given string and assigns it to the Distance field.
func (o *GeoDistanceFilter) SetDistance(v string) {
	o.Distance = &v
}

func (o GeoDistanceFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoDistanceFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationAnchor) {
		toSerialize["location_anchor"] = o.LocationAnchor
	}
	if !IsNil(o.LocationSource) {
		toSerialize["location_source"] = o.LocationSource
	}
	if !IsNil(o.DistanceType) {
		toSerialize["distance_type"] = o.DistanceType
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	return toSerialize, nil
}

type NullableGeoDistanceFilter struct {
	value *GeoDistanceFilter
	isSet bool
}

func (v NullableGeoDistanceFilter) Get() *GeoDistanceFilter {
	return v.value
}

func (v *NullableGeoDistanceFilter) Set(val *GeoDistanceFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoDistanceFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoDistanceFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoDistanceFilter(val *GeoDistanceFilter) *NullableGeoDistanceFilter {
	return &NullableGeoDistanceFilter{value: val, isSet: true}
}

func (v NullableGeoDistanceFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoDistanceFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


