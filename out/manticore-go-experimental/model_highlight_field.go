/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HighlightField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighlightField{}

// HighlightField Query Highlight field with options set
type HighlightField struct {
	Name string `json:"name"`
	Limit *int32 `json:"limit,omitempty"`
	LimitWords *int32 `json:"limit_words,omitempty"`
	LimitSnippets *int32 `json:"limit_snippets,omitempty"`
}

type _HighlightField HighlightField

// NewHighlightField instantiates a new HighlightField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlightField(name string) *HighlightField {
	this := HighlightField{}
	this.Name = name
	var limit int32 = 256
	this.Limit = &limit
	var limitWords int32 = 0
	this.LimitWords = &limitWords
	var limitSnippets int32 = 0
	this.LimitSnippets = &limitSnippets
	return &this
}

// NewHighlightFieldWithDefaults instantiates a new HighlightField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightFieldWithDefaults() *HighlightField {
	this := HighlightField{}
	var limit int32 = 256
	this.Limit = &limit
	var limitWords int32 = 0
	this.LimitWords = &limitWords
	var limitSnippets int32 = 0
	this.LimitSnippets = &limitSnippets
	return &this
}

// GetName returns the Name field value
func (o *HighlightField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HighlightField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HighlightField) SetName(v string) {
	o.Name = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *HighlightField) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightField) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *HighlightField) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *HighlightField) SetLimit(v int32) {
	o.Limit = &v
}

// GetLimitWords returns the LimitWords field value if set, zero value otherwise.
func (o *HighlightField) GetLimitWords() int32 {
	if o == nil || IsNil(o.LimitWords) {
		var ret int32
		return ret
	}
	return *o.LimitWords
}

// GetLimitWordsOk returns a tuple with the LimitWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightField) GetLimitWordsOk() (*int32, bool) {
	if o == nil || IsNil(o.LimitWords) {
		return nil, false
	}
	return o.LimitWords, true
}

// HasLimitWords returns a boolean if a field has been set.
func (o *HighlightField) HasLimitWords() bool {
	if o != nil && !IsNil(o.LimitWords) {
		return true
	}

	return false
}

// SetLimitWords gets a reference to the given int32 and assigns it to the LimitWords field.
func (o *HighlightField) SetLimitWords(v int32) {
	o.LimitWords = &v
}

// GetLimitSnippets returns the LimitSnippets field value if set, zero value otherwise.
func (o *HighlightField) GetLimitSnippets() int32 {
	if o == nil || IsNil(o.LimitSnippets) {
		var ret int32
		return ret
	}
	return *o.LimitSnippets
}

// GetLimitSnippetsOk returns a tuple with the LimitSnippets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightField) GetLimitSnippetsOk() (*int32, bool) {
	if o == nil || IsNil(o.LimitSnippets) {
		return nil, false
	}
	return o.LimitSnippets, true
}

// HasLimitSnippets returns a boolean if a field has been set.
func (o *HighlightField) HasLimitSnippets() bool {
	if o != nil && !IsNil(o.LimitSnippets) {
		return true
	}

	return false
}

// SetLimitSnippets gets a reference to the given int32 and assigns it to the LimitSnippets field.
func (o *HighlightField) SetLimitSnippets(v int32) {
	o.LimitSnippets = &v
}

func (o HighlightField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighlightField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.LimitWords) {
		toSerialize["limit_words"] = o.LimitWords
	}
	if !IsNil(o.LimitSnippets) {
		toSerialize["limit_snippets"] = o.LimitSnippets
	}
	return toSerialize, nil
}

func (o *HighlightField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHighlightField := _HighlightField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHighlightField)

	if err != nil {
		return err
	}

	*o = HighlightField(varHighlightField)

	return err
}

type NullableHighlightField struct {
	value *HighlightField
	isSet bool
}

func (v NullableHighlightField) Get() *HighlightField {
	return v.value
}

func (v *NullableHighlightField) Set(val *HighlightField) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlightField) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlightField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlightField(val *HighlightField) *NullableHighlightField {
	return &NullableHighlightField{value: val, isSet: true}
}

func (v NullableHighlightField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlightField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


