/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EqualsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EqualsFilter{}

// EqualsFilter Equals attribute filter
type EqualsFilter struct {
	Field string `json:"field"`
	Value map[string]interface{} `json:"value"`
}

type _EqualsFilter EqualsFilter

// NewEqualsFilter instantiates a new EqualsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqualsFilter(field string, value map[string]interface{}) *EqualsFilter {
	this := EqualsFilter{}
	this.Field = field
	this.Value = value
	return &this
}

// NewEqualsFilterWithDefaults instantiates a new EqualsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualsFilterWithDefaults() *EqualsFilter {
	this := EqualsFilter{}
	return &this
}

// GetField returns the Field field value
func (o *EqualsFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *EqualsFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *EqualsFilter) SetField(v string) {
	o.Field = v
}

// GetValue returns the Value field value
func (o *EqualsFilter) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EqualsFilter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *EqualsFilter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o EqualsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EqualsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *EqualsFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEqualsFilter := _EqualsFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEqualsFilter)

	if err != nil {
		return err
	}

	*o = EqualsFilter(varEqualsFilter)

	return err
}

type NullableEqualsFilter struct {
	value *EqualsFilter
	isSet bool
}

func (v NullableEqualsFilter) Get() *EqualsFilter {
	return v.value
}

func (v *NullableEqualsFilter) Set(val *EqualsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualsFilter(val *EqualsFilter) *NullableEqualsFilter {
	return &NullableEqualsFilter{value: val, isSet: true}
}

func (v NullableEqualsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


