openapi: 3.0.2
info:
  contact:
    email: info@manticoresearch.com
    name: Manticore Software Ltd.
    url: https://manticoresearch.com/contact-us/
  description: |
    Ð¡lient for Manticore Search.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Manticore Search Client
  version: 3.3.1
externalDocs:
  description: Find out more about Manticore Search
  url: https://manticoresearch.com/
servers:
- description: Default Manticore Search HTTP
  url: http://127.0.0.1:9308/
tags:
- description: "Operations regarding adding, updating or deleting documents"
  name: Index
- description: Operations about performing searches over indexes
  name: Search
- description: Various operations
  name: Utils
paths:
  /pq/{index}/search:
    post:
      description: "Performs a percolate search. \nThis method must be used only on\
        \ percolate indexes.\n\nExpects two parameters: the index name and an object\
        \ with array of documents to be tested.\nAn example of the documents object:\n\
        \n  ```\n  {\n    \"query\":\n    {\n      \"percolate\":\n      {\n     \
        \   \"document\":\n        {\n          \"content\":\"sample content\"\n \
        \       }\n      }\n    }\n  }\n  ```\n\nResponds with an object with matched\
        \ stored queries: \n\n  ```\n  {\n    'timed_out':false,\n    'hits':\n  \
        \  {\n      'total':2,\n      'max_score':1,\n      'hits':\n      [\n   \
        \     {\n          '_index':'idx_pq_1',\n          '_type':'doc',\n      \
        \    '_id':'2',\n          '_score':'1',\n          '_source':\n         \
        \ {\n            'query':\n            {\n              'match':{'title':'some'}\n\
        \            }\n          }\n        },\n        {\n          '_index':'idx_pq_1',\n\
        \          '_type':'doc',\n          '_id':'5',\n          '_score':'1',\n\
        \          '_source':\n          {\n            'query':\n            {\n\
        \              'ql':'some | none'\n            }\n          }\n        }\n\
        \      ]\n    }\n  }\n  ```\n"
      externalDocs:
        url: https://manual.manticoresearch.com/Updating_documents/UPDATE
      operationId: percolate
      parameters:
      - description: Name of the percolate index
        explode: false
        in: path
        name: index
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              query:
                percolate:
                  document:
                    title: some text to match
            schema:
              $ref: '#/components/schemas/percolateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
          description: items found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Perform reverse search on a percolate index
      tags:
      - Search
      x-is_percolate: true
  /search:
    post:
      description: |2

        The method expects an object with the following mandatory properties:
        * the name of the index to search
        * the match query object
        For details, see the documentation on [**SearchRequest**](SearchRequest.md)
        The method returns an object with the following properties:
        - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:
           - total: the total number of hits found.
           - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:
             - _id: the ID of the matched document.
             - _score: the score of the matched document.
             - _source: the source data of the matched document.

        In addition, if profiling is enabled, the response will include an additional array with profiling information attached.
        Here is an example search response:

          ```
          {
            'took':10,
            'timed_out':false,
            'hits':
            {
              'total':2,
              'hits':
              [
                {'_id':'1','_score':1,'_source':{'gid':11}},
                {'_id':'2','_score':1,'_source':{'gid':12}}
              ]
            }
          }
          ```

        For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON).
      externalDocs:
        url: https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
          description: Ok
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Performs a search on an index
      tags:
      - Search
      x-is_search: true
  /insert:
    post:
      description: "Insert a document. \nExpects an object like:\n \n  ```\n  {\n\
        \    'index':'movies',\n    'id':701,\n    'doc':\n    {\n      'title':'This\
        \ is an old movie',\n      'plot':'A secret team goes to North Pole',\n  \
        \    'year':1950,\n      'rating':9.5,\n      'lat':60.4,\n      'lon':51.99,\n\
        \      'advise':'PG-13',\n      'meta':'{\"keywords\":{\"travel\",\"ice\"\
        },\"genre\":{\"adventure\"}}',\n      'language':[2,3]\n    }\n  }\n  ```\n\
        \ \nThe document id can also be missing, in which case an autogenerated one\
        \ will be used:\n         \n  ```\n  {\n    'index':'movies',\n    'doc':\n\
        \    {\n      'title':'This is a new movie',\n      'plot':'A secret team\
        \ goes to North Pole',\n      'year':2020,\n      'rating':9.5,\n      'lat':60.4,\n\
        \      'lon':51.99,\n      'advise':'PG-13',\n      'meta':'{\"keywords\"\
        :{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}',\n      'language':[2,3]\n\
        \    }\n  }\n  ```\n \nIt responds with an object in format:\n  \n  ```\n\
        \  {'_index':'products','_id':701,'created':true,'result':'created','status':201}\n\
        \  ```\n"
      externalDocs:
        url: https://manual.manticoresearch.com/Adding_documents_to_an_index/Adding_documents_to_a_real-time_index#Adding-documents-to-a-real-time-index
      operationId: insert
      requestBody:
        content:
          application/json:
            example:
              index: test
              id: 1
              doc:
                title: sample title
                gid: 10
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Create a new document in an index
      tags:
      - Index
      x-is_indexapi: true
      x-is_insert: true
  /replace:
    post:
      description: |
        Replace an existing document. Input has same format as `insert` operation. <br/>
        Responds with an object in format: <br/>

          ```
          {'_index':'products','_id':1,'created':false,'result':'updated','status':200}
          ```
      externalDocs:
        url: https://manual.manticoresearch.com/Adding_documents_to_an_index/Adding_documents_to_a_real-time_index#Adding-documents-to-a-real-time-index
      operationId: replace
      requestBody:
        content:
          application/json:
            example:
              index: test
              id: 1
              doc:
                title: updated title
                gid: 15
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Replace new document in an index
      tags:
      - Index
      x-is_indexapi: true
      x-is_replace: true
  /update:
    post:
      description: "Update one or several documents.\nThe update can be made by passing\
        \ the id or by using a match query in case multiple documents can be updated.\
        \  For example update a document using document id:\n\n  ```\n  {'index':'movies','doc':{'rating':9.49},'id':100}\n\
        \  ```\n\nAnd update by using a match query:\n\n  ```\n  {\n    'index':'movies',\n\
        \    'doc':{'rating':9.49},\n    'query':\n    {\n      'bool':\n      {\n\
        \        'must':\n        [\n          {'query_string':'new movie'}\n    \
        \    ]\n      }\n    }\n  }\n  ``` \n\nThe match query has same syntax as\
        \ for searching.\nResponds with an object that tells how many documents where\
        \ updated in format: \n\n  ```\n  {'_index':'products','updated':1}\n  ```\n"
      externalDocs:
        url: https://manual.manticoresearch.com/Updating_documents/UPDATE
      operationId: update
      requestBody:
        content:
          application/json:
            example:
              index: test
              doc:
                gid: 20
              query:
                equals:
                  cat_id: 2
            schema:
              $ref: '#/components/schemas/updateDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Update a document in an index
      tags:
      - Index
      x-is_indexapi: true
      x-is_update: true
      x-is_modify: true
  /{index}/_update/{id}:
    post:
      description: "Partially replaces a document with given id in an index\nResponds\
        \ with an object of the following format: \n\n  ```\n  {'_index':'products','updated':1}\n\
        \  ```\n"
      externalDocs:
        url: https://manual.manticoresearch.com/Updating_documents/REPLACE#JSON-REPLACE
      operationId: _update
      parameters:
      - description: Name of the percolate index
        explode: false
        in: path
        name: index
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the document to replace
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: number
        style: simple
      requestBody:
        content:
          application/json:
            example:
              doc:
                price: 20
            schema:
              $ref: '#/components/schemas/replaceDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Partially replaces a document in an index
      tags:
      - Index
      x-is_indexapi: true
      x-is_update: true
      x-is_modify: true
  /delete:
    post:
      description: "Delete one or several documents.\nThe method has 2 ways of deleting:\
        \ either by id, in case only one document is deleted or by using a  match\
        \ query, in which case multiple documents can be delete .\nExample of input\
        \ to delete by id:\n\n  ```\n  {'index':'movies','id':100}\n  ```\n\nExample\
        \ of input to delete using a query:\n\n  ```\n  {\n    'index':'movies',\n\
        \    'query':\n    {\n      'bool':\n      {\n        'must':\n        [\n\
        \          {'query_string':'new movie'}\n        ]\n      }\n    }\n  }\n\
        \  ```\n\nThe match query has same syntax as in for searching.\nResponds with\
        \ an object telling how many documents got deleted: \n\n  ```\n  {'_index':'products','updated':1}\n\
        \  ```\n"
      externalDocs:
        url: https://manual.manticoresearch.com/Updating_documents/UPDATE
      operationId: delete
      requestBody:
        content:
          application/json:
            example:
              index: test
              query:
                match:
                  title: apple
            schema:
              $ref: '#/components/schemas/deleteDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Delete a document in an index
      tags:
      - Index
      x-is_indexapi: true
      x-is_delete: true
      x-is_modify: true
  /bulk:
    post:
      description: "Sends multiple operatons like inserts, updates, replaces or deletes.\
        \ \nFor each operation it's object must have same format as in their dedicated\
        \ method. \nThe method expects a raw string as the batch in NDJSON.\n Each\
        \ operation object needs to be serialized to \n JSON and separated by endline\
        \ (\\n). \n \n  An example of raw input:\n  \n  ```\n  {\"insert\": {\"index\"\
        : \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"\
        rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\"\
        , \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"\
        adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}\n \
        \ \\n\n  {\"delete\": {\"index\": \"movies\",\"id\":700}}\n  ```\n  \n  Responds\
        \ with an object telling whenever any errors occured and an array with status\
        \ for each operation:\n  \n  ```\n  {\n    'items':\n    [\n      {\n    \
        \    'update':{'_index':'products','_id':1,'result':'updated'}\n      },\n\
        \      {\n        'update':{'_index':'products','_id':2,'result':'updated'}\n\
        \      }\n    ],\n    'errors':false\n  }\n  ```\n \n"
      externalDocs:
        url: https://manual.manticoresearch.com/Updating_documents/UPDATE
      operationId: bulk
      requestBody:
        content:
          application/x-ndjson:
            example: "[\"'{\\\"insert\\\": {\\\"index\\\": \\\"test\\\", \\\"id\\\"\
              : 1, \\\"doc\\\": {\\\"title\\\": \\\"Title 1\\\"}}},\\\\n{\\\"insert\\\
              \": {\\\"index\\\": \\\"test\\\", \\\"id\\\": 2, \\\"doc\\\": {\\\"\
              title\\\": \\\"Title 2\\\"}}}'\"]"
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Bulk index operations
      tags:
      - Index
      x-is_indexapi: true
      x-is_bulk: true
  /sql:
    post:
      description: |
        Run a query in SQL format.
        Expects a query string passed through `body` parameter and optional `raw_response` parameter that defines a format of response.
        `raw_response` can be set to `False` for Select queries only, e.g., `SELECT * FROM myindex`
        The query string must stay as it is, no URL encoding is needed.
        The response object depends on the query executed. In select mode the response has same format as `/search` operation.
      externalDocs:
        url: https://manual.manticoresearch.com/Connecting_to_the_server/HTTP#sql-api
      operationId: sql
      parameters:
      - description: |
          Optional parameter, defines a format of response. Can be set to `False` for Select only queries and set to `True` or omitted for any type of queries:
        explode: true
        in: query
        name: raw_response
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          text/plain:
            example: SHOW TABLES
            schema:
              type: string
        description: |
          A query parameter string.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sqlResponse'
          description: |
            In case of SELECT-only in mode none the response schema is the same as of `search`.
            In case of `mode=raw` the response depends on the query executed.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Perform SQL requests
      tags:
      - utils
      x-is_sql: true
components:
  examples:
    objectExample:
      summary: A sample object
      value: www
  schemas:
    fulltextFilter:
      additionalProperties: true
      example:
        id: 1
      type: object
      x-is_fulltext_filter: true
    attrFilter:
      additionalProperties: true
      type: object
    aggregation:
      description: Aggregation Alias
      properties:
        terms:
          $ref: '#/components/schemas/aggregation_terms'
        sort:
          items:
            additionalProperties:
              $ref: '#/components/schemas/aggregation_sort_inner_value'
            type: object
          type: array
        composite:
          $ref: '#/components/schemas/aggregation_composite'
      type: object
      x-is_req_agg: true
    equalsFilter:
      description: Equals attribute filter
      example:
        field1: 1
      properties:
        field:
          type: string
        value:
          type: object
      required:
      - field
      - value
      type: object
      x-is_equals_filter: true
    inFilter:
      description: In attribute filter
      example:
        field1:
        - a
        - b
      properties:
        field:
          type: string
        values:
          items:
            type: object
          type: array
      required:
      - field
      - values
      type: object
      x-is_in_filter: true
    rangeFilter:
      description: Range attribute filter
      example:
        field1:
          gte: 10
          lte: 20
      properties:
        field:
          type: string
        lte:
          $ref: '#/components/schemas/rangeFilter_lte'
        gte:
          $ref: '#/components/schemas/rangeFilter_lte'
        lt:
          $ref: '#/components/schemas/rangeFilter_lte'
        gt:
          $ref: '#/components/schemas/rangeFilter_lte'
      required:
      - field
      type: object
      x-is_range_filter: true
    geoDistanceFilter:
      description: Geo distance attribute filter
      example:
        field1:
          gte: 10
          lte: 20
      properties:
        location_anchor:
          $ref: '#/components/schemas/geoDistanceFilter_location_anchor'
        location_source:
          description: Attribute containing latitude and longitude data
          example: "attr_with_lat,attr_with_lon"
          type: string
        distance_type:
          enum:
          - adaptive
          - haversine
          type: string
        distance:
          example: 100 km
          type: string
      type: object
      x-is_geo_filter: true
    boolFilter:
      description: Boolean attribute filter
      properties:
        should:
          items:
            type: object
          type: array
        must:
          items:
            type: object
          type: array
        must_not:
          items:
            type: object
          type: array
      type: object
      x-is_bool_filter: true
    queryFilter:
      description: Query string filter
      properties:
        query_string:
          type: string
      required:
      - query_string
      type: object
    matchFilter:
      description: Query match filter
      properties:
        query_string:
          default: ""
          example: query
          type: string
        query_fields:
          default: '*'
          example: "field1,field2"
          type: string
      required:
      - query_fields
      - query_string
      type: object
      x-is_match_filter: true
    matchPhraseFilter:
      description: Query match expression
      properties:
        query_phrase:
          example: query phrase
          type: string
        query_fields:
          example: "field1,field2"
          type: string
      required:
      - query_fields
      - query_phrase
      type: object
      x-is_match_phrase_filter: true
    matchOpFilter:
      description: Query match expression
      properties:
        query_string:
          example: query
          type: string
        query_fields:
          example: "field1,field2"
          type: string
        operator:
          enum:
          - or
          - and
          type: string
      required:
      - operator
      - query_fields
      - query_string
      type: object
      x-is_match_op_filter: true
    sort:
      description: Query sort attribute name
      type: string
      x-is_sort: true
    matchOp:
      description: Query match expression with logical operator
      properties:
        query_info:
          example:
            query: another query
            operator: and
          required:
          - operator
          - query
          type: object
      required:
      - query_info
      type: object
    offset:
      description: Query offset parameter
      type: integer
    limit:
      description: Query offset parameter
      type: integer
    maxMatches:
      description: Query max matches parameter
      type: integer
    filterNumber:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: 1
          type: number
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    filterString:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: test
          type: string
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    filterBoolean:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: false
          type: boolean
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    notFilterNumber:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: 1
          type: number
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    notFilterString:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: test
          type: string
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    notFilterBoolean:
      description: Query filter
      properties:
        filter_field:
          example: test
          type: string
        operation:
          example: equals
          type: string
        filter_value:
          example: false
          type: boolean
      required:
      - filter_field
      - filter_value
      - operation
      type: object
    sortOrder:
      description: Query sort expression
      properties:
        attr:
          example: test
          type: string
        order:
          enum:
          - asc
          - desc
          example: asc
          type: string
      required:
      - attr
      - order
      type: object
      x-is_sort_order: true
    sortMVA:
      description: Query sort expression for MVA attributes
      properties:
        attr:
          example: test
          type: string
        order:
          enum:
          - asc
          - desc
          example: asc
          type: string
        mode:
          enum:
          - min
          - max
          example: max
          type: string
      required:
      - attr
      - mode
      - order
      type: object
      x-is_sort_mva: true
    sortMultiple:
      description: Query sort expression for multiple attributes
      properties:
        attrs:
          additionalProperties: true
          example:
            name: desc
            title: asc
          type: object
        replace:
          example: false
          type: boolean
      required:
      - attrs
      - replace
      type: object
    highlightField:
      description: Query Highlight field with options set
      properties:
        name:
          type: string
        limit:
          default: 256
          type: integer
        limit_words:
          default: 0
          type: integer
        limit_snippets:
          default: 0
          type: integer
      required:
      - name
      type: object
      x-is_highlight_field: true
    highlight:
      description: Query HIGHLIGHT expression
      example:
        fields:
        - title
        pre_tags: <i>
        post_tags: </i>
      properties:
        fieldnames:
          example:
          - title
          - content
          items:
            type: string
          type: array
        fields:
          items:
            $ref: '#/components/schemas/highlightField'
          type: array
        encoder:
          enum:
          - default
          - html
          type: string
        highlight_query:
          additionalProperties: true
          nullable: true
          type: object
        pre_tags:
          default: <strong>
          type: string
        post_tags:
          default: </strong>
          type: string
        no_match_size:
          enum:
          - 0
          - 1
          type: integer
        fragment_size:
          default: 256
          type: integer
        number_of_fragments:
          default: 0
          type: integer
        limit:
          default: 256
          type: integer
        limit_words:
          default: 0
          type: integer
        limit_snippets:
          default: 0
          type: integer
        limits_per_field:
          default: false
          type: boolean
        use_boundaries:
          default: false
          type: boolean
        force_all_words:
          default: false
          type: boolean
        allow_empty:
          default: false
          type: boolean
        emit_zones:
          default: false
          type: boolean
        force_snippets:
          default: false
          type: boolean
        around:
          default: 5
          type: integer
        start_snippet_id:
          default: 1
          type: integer
        html_strip_mode:
          enum:
          - none
          - strip
          - index
          - retain
          type: string
        snippet_boundary:
          enum:
          - sentence
          - paragraph
          - zone
          type: string
      type: object
      x-is_req_highlight: true
    source:
      description: Query fields to be returned
      example: attr*
      type: string
    sourceMultiple:
      description: Query fields to be returned
      example:
      - attr1
      - attr2
      items:
        type: string
      type: array
    sourceByRules:
      description: Query fields to be included/excluded to/from response
      example:
        includes:
        - attr1
        - attri*
        excludes:
        - desc*
      properties:
        includes:
          default: []
          items:
            type: string
          type: array
        excludes:
          default:
          - ""
          items:
            type: string
          type: array
      required:
      - excludes
      - includes
      type: object
      x-is_source_by_rules: true
    facet:
      description: Query FACET expression
      example:
        attr: title
        alias: some_facet
        limit: 1
      properties:
        attr:
          description: The name of an attribute to facet
          type: string
        alias:
          description: Facet alias
          type: string
        limit:
          description: The number of facet values to return
          type: integer
      required:
      - attr
      type: object
    option:
      additionalProperties: true
      description: Query OPTION expression
      example:
        cutoff: 1
        retry_count: 3
        field_weights:
          title: 10
          description: 20
      type: object
    trackScores:
      description: Enables weight calculation for the query
      type: boolean
    profile:
      description: Enables query profiling
      type: boolean
    reset:
      description: Clears all search conditions
      type: boolean
    searchRequest:
      description: Request object for search operation
      example:
        index:
          $ref: '#/components/examples/objectExample'
      properties:
        index:
          default: ""
          example: test
          type: string
        query:
          example:
            match_all: {}
          type: object
          x-is_req_query: true
        fulltext_filter:
          example: {}
          type: object
          x-is_fulltext_filter: true
        attr_filter:
          example: {}
          type: object
          x-is_attr_filter: true
        limit:
          type: integer
        offset:
          type: integer
        max_matches:
          type: integer
        sort:
          example: []
          items:
            type: object
          type: array
        aggs:
          additionalProperties:
            $ref: '#/components/schemas/aggregation'
          example:
            agg1:
              terms:
                field: field1
                size: 1000
              sort:
              - field1: null
                order: asc
          type: object
        expressions:
          additionalProperties:
            type: string
          example:
            title_len: crc32(title)
          type: object
        highlight:
          $ref: '#/components/schemas/highlight'
        _source:
          example: {}
          type: object
          x-is_req_source: true
        options:
          additionalProperties: true
          type: object
        profile:
          type: boolean
        track_scores:
          type: boolean
      required:
      - index
      type: object
      x-is_search_req: true
    updateDocumentRequest:
      description: Payload for update document
      example:
        index: test
        doc:
          price: 1000
        query:
          match:
            '*': apple
      properties:
        index:
          type: string
        doc:
          additionalProperties: true
          description: Index name
          example:
            gid: 10
          type: object
        id:
          description: Document ID
          format: int64
          type: integer
        query:
          additionalProperties: true
          description: Query tree object
          example:
            query:
              match:
                title: match me
          nullable: true
          type: object
      required:
      - doc
      - index
      type: object
    deleteDocumentRequest:
      description: |
        Payload for delete request.
        Documents can be deleted either one by one by specifying the document id or by providing a query object.
        For more information see  [Delete API](https://manual.manticoresearch.com/Deleting_documents)
      example:
        index: test
        id: 1
      properties:
        index:
          description: Index name
          type: string
        cluster:
          description: cluster name
          type: string
        id:
          description: Document ID
          format: int64
          type: integer
        query:
          description: Query tree object
          type: object
      required:
      - index
      type: object
    insertDocumentRequest:
      description: |
        Object with document data.
      example:
        index: test
        doc:
          title: This is some title
          gid: 100
      properties:
        index:
          description: Name of the index
          type: string
        cluster:
          description: cluster name
          type: string
        id:
          description: |
            Document ID.
          format: int64
          type: integer
        doc:
          additionalProperties: true
          description: |
            Object with document data
          type: object
      required:
      - doc
      - index
      type: object
    replaceDocumentRequest:
      description: |
        Object with document data.
      example:
        doc:
          title: This is some title
          gid: 100
      properties:
        doc:
          additionalProperties: true
          description: |
            Object with document data
          type: object
      required:
      - doc
      type: object
    percolateRequest:
      description: Object with documents to percolate
      example:
        query:
          percolate:
            document:
              title: some text to match
      properties:
        query:
          $ref: '#/components/schemas/percolateRequest_query'
      required:
      - query
      type: object
    searchResponse:
      description: Response object of a search request
      example:
        hits:
          total: 2
          hits:
          - _id: 1
            _score: 1
            _source:
              gid: 11
          - _id: 2
            _score: 1
            _source:
              gid: 20
        took: 0
        profile: "{}"
        warning:
          key: ""
        timed_out: true
        aggregations:
          key: ""
      properties:
        took:
          type: integer
        timed_out:
          type: boolean
        aggregations:
          additionalProperties: true
          type: object
        hits:
          $ref: '#/components/schemas/searchResponse_hits'
        profile:
          type: object
        warning:
          additionalProperties: true
          type: object
      type: object
    sqlResponse:
      description: List containing Response object from sql that depends on the query
        executed as its item.
      example:
      - total: 0
        error: null
      items:
        type: object
      type: array
    successResponse:
      description: Success response
      example:
        _index: test
        _id: 1
        result: created
        created: true
      properties:
        _index:
          type: string
        _id:
          format: int64
          type: integer
        created:
          type: boolean
        result:
          type: string
        found:
          type: boolean
      type: object
    bulkResponse:
      additionalProperties: true
      description: Success bulk response
      example:
        error: error
        items: "{}"
        errors: true
      properties:
        items:
          type: object
        errors:
          type: boolean
        error:
          type: string
      type: object
    updateResponse:
      description: Success response
      example:
        _index: test
        updated: 29
      properties:
        _index:
          type: string
        updated:
          type: integer
        _id:
          format: int64
          type: integer
        result:
          type: string
      type: object
    deleteResponse:
      description: Success response
      example:
        _index: test
        deleted: 29
      properties:
        _index:
          type: string
        deleted:
          type: integer
        _id:
          format: int64
          type: integer
        result:
          type: string
      type: object
    errorResponse:
      description: Error response
      example:
        status: 500
        error: an error occured
      properties:
        error:
          additionalProperties: true
          type: object
        status:
          example: 500
          type: integer
      required:
      - error
      - status
      type: object
    aggregation_terms:
      properties:
        field:
          description: Name of attribute to aggregate by
          example: field1
          type: string
        size:
          description: Maximum number of buckets in the result
          example: 1000
          type: integer
      type: object
    aggregation_sort_inner_value:
      properties:
        order:
          type: string
      type: object
    aggregation_composite_sources_inner_value_terms:
      properties:
        field:
          description: Name of attribute to aggregate by
          example: field1
          type: string
      type: object
    aggregation_composite_sources_inner_value:
      properties:
        terms:
          $ref: '#/components/schemas/aggregation_composite_sources_inner_value_terms'
      type: object
    aggregation_composite:
      description: Composite aggregation
      properties:
        size:
          description: Maximum number of composite buckets in the result
          example: 1000
          type: integer
        sources:
          items:
            additionalProperties:
              $ref: '#/components/schemas/aggregation_composite_sources_inner_value'
            type: object
          type: array
      type: object
    rangeFilter_lte:
      nullable: true
      oneOf:
      - type: number
      - type: string
    geoDistanceFilter_location_anchor:
      description: Geo pin point object
      properties:
        lat:
          description: Geo latitude of pin point in degrees
          type: number
        lon:
          description: Geo longitude pf pin point in degrees
          type: number
      type: object
    percolateRequest_query:
      additionalProperties: true
      example:
        percolate:
          document:
            title: some text to match
      properties:
        percolate:
          type: object
      required:
      - percolate
      type: object
    searchResponse_hits:
      example:
        total: 2
        hits:
        - _id: 1
          _score: 1
          _source:
            gid: 11
        - _id: 2
          _score: 1
          _source:
            gid: 20
      properties:
        max_score:
          type: integer
        total:
          type: integer
        total_relation:
          type: string
        hits:
          items:
            type: object
          type: array
      type: object
