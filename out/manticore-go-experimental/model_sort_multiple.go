/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SortMultiple type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SortMultiple{}

// SortMultiple Query sort expression for multiple attributes
type SortMultiple struct {
	Attrs map[string]interface{} `json:"attrs"`
	Replace bool `json:"replace"`
}

type _SortMultiple SortMultiple

// NewSortMultiple instantiates a new SortMultiple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortMultiple(attrs map[string]interface{}, replace bool) *SortMultiple {
	this := SortMultiple{}
	this.Attrs = attrs
	this.Replace = replace
	return &this
}

// NewSortMultipleWithDefaults instantiates a new SortMultiple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortMultipleWithDefaults() *SortMultiple {
	this := SortMultiple{}
	return &this
}

// GetAttrs returns the Attrs field value
func (o *SortMultiple) GetAttrs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attrs
}

// GetAttrsOk returns a tuple with the Attrs field value
// and a boolean to check if the value has been set.
func (o *SortMultiple) GetAttrsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Attrs, true
}

// SetAttrs sets field value
func (o *SortMultiple) SetAttrs(v map[string]interface{}) {
	o.Attrs = v
}

// GetReplace returns the Replace field value
func (o *SortMultiple) GetReplace() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Replace
}

// GetReplaceOk returns a tuple with the Replace field value
// and a boolean to check if the value has been set.
func (o *SortMultiple) GetReplaceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replace, true
}

// SetReplace sets field value
func (o *SortMultiple) SetReplace(v bool) {
	o.Replace = v
}

func (o SortMultiple) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SortMultiple) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attrs"] = o.Attrs
	toSerialize["replace"] = o.Replace
	return toSerialize, nil
}

func (o *SortMultiple) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attrs",
		"replace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSortMultiple := _SortMultiple{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSortMultiple)

	if err != nil {
		return err
	}

	*o = SortMultiple(varSortMultiple)

	return err
}

type NullableSortMultiple struct {
	value *SortMultiple
	isSet bool
}

func (v NullableSortMultiple) Get() *SortMultiple {
	return v.value
}

func (v *NullableSortMultiple) Set(val *SortMultiple) {
	v.value = val
	v.isSet = true
}

func (v NullableSortMultiple) IsSet() bool {
	return v.isSet
}

func (v *NullableSortMultiple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortMultiple(val *SortMultiple) *NullableSortMultiple {
	return &NullableSortMultiple{value: val, isSet: true}
}

func (v NullableSortMultiple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortMultiple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


