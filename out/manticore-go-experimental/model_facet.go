/*
Manticore Search Client

Ð¡lient for Manticore Search. 

API version: 3.3.1
Contact: info@manticoresearch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Facet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Facet{}

// Facet Query FACET expression
type Facet struct {
	// The name of an attribute to facet
	Attr string `json:"attr"`
	// Facet alias
	Alias *string `json:"alias,omitempty"`
	// The number of facet values to return
	Limit *int32 `json:"limit,omitempty"`
}

type _Facet Facet

// NewFacet instantiates a new Facet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacet(attr string) *Facet {
	this := Facet{}
	this.Attr = attr
	return &this
}

// NewFacetWithDefaults instantiates a new Facet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetWithDefaults() *Facet {
	this := Facet{}
	return &this
}

// GetAttr returns the Attr field value
func (o *Facet) GetAttr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attr
}

// GetAttrOk returns a tuple with the Attr field value
// and a boolean to check if the value has been set.
func (o *Facet) GetAttrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attr, true
}

// SetAttr sets field value
func (o *Facet) SetAttr(v string) {
	o.Attr = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *Facet) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Facet) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *Facet) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *Facet) SetAlias(v string) {
	o.Alias = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Facet) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Facet) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Facet) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *Facet) SetLimit(v int32) {
	o.Limit = &v
}

func (o Facet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Facet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attr"] = o.Attr
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

func (o *Facet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFacet := _Facet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFacet)

	if err != nil {
		return err
	}

	*o = Facet(varFacet)

	return err
}

type NullableFacet struct {
	value *Facet
	isSet bool
}

func (v NullableFacet) Get() *Facet {
	return v.value
}

func (v *NullableFacet) Set(val *Facet) {
	v.value = val
	v.isSet = true
}

func (v NullableFacet) IsSet() bool {
	return v.isSet
}

func (v *NullableFacet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacet(val *Facet) *NullableFacet {
	return &NullableFacet{value: val, isSet: true}
}

func (v NullableFacet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


